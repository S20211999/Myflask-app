# --- CRITICAL FIX: SET QT_API ---
import os
os.environ['QT_API'] = 'pyside6'

import sys
import qtawesome
import json
import requests
import struct
import math

from PySide6.QtCore import (Qt, QSize, Signal, QPoint, QTimer)
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QComboBox, QGroupBox, QCheckBox,
    QPushButton, QStackedWidget, QLabel, QLineEdit, QGridLayout, QTabWidget,
    QFrame, QScrollArea, QSizePolicy, QFileDialog, QMessageBox, QFormLayout,
    QTextEdit, QButtonGroup, QDialog
)
from PySide6.QtGui import QPixmap, QIcon, QMouseEvent, QClipboard, QFontDatabase
from PySide6.QtSvgWidgets import QSvgWidget

# --- Constants ---
FLASK_BASE_URL = "http://localhost:5000"  # Configure your Flask server URL

# --- License Verification Dialog ---
class LicenseVerificationDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("License Verification")
        self.setFixedSize(350, 250)
        self.setModal(True)
        
        layout = QVBoxLayout(self)
        
        # Username
        layout.addWidget(QLabel("Username:"))
        self.username_edit = QLineEdit()
        layout.addWidget(self.username_edit)
        
        # Email
        layout.addWidget(QLabel("Email:"))
        self.email_edit = QLineEdit()
        layout.addWidget(self.email_edit)
        
        # License Number
        layout.addWidget(QLabel("License Number:"))
        self.license_edit = QLineEdit()
        layout.addWidget(self.license_edit)
        
        # Server URL
        layout.addWidget(QLabel("Server URL:"))
        self.server_edit = QLineEdit(FLASK_BASE_URL)
        layout.addWidget(self.server_edit)
        
        # Buttons
        button_layout = QHBoxLayout()
        self.verify_button = QPushButton("Verify License")
        self.cancel_button = QPushButton("Cancel")
        
        self.verify_button.clicked.connect(self.attempt_verification)
        self.cancel_button.clicked.connect(self.reject)
        
        button_layout.addWidget(self.verify_button)
        button_layout.addWidget(self.cancel_button)
        layout.addLayout(button_layout)
        
        self.verification_data = None

    def attempt_verification(self):
        username = self.username_edit.text()
        email = self.email_edit.text()
        license_number = self.license_edit.text()
        server_url = self.server_edit.text()
        
        if not username or not email or not license_number:
            QMessageBox.warning(self, "Error", "Please enter all required fields")
            return
        
        try:
            # Attempt license verification
            response = requests.post(f"{server_url}/api/verify_license", 
                                   json={
                                       "username": username, 
                                       "email": email,
                                       "license_number": license_number
                                   },
                                   timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('status') == 'approved':
                    self.verification_data = {
                        'username': username,
                        'email': email,
                        'license_number': license_number,
                        'server_url': server_url
                    }
                    global FLASK_BASE_URL
                    FLASK_BASE_URL = server_url
                    QMessageBox.information(self, "Success", "License verified successfully!")
                    self.accept()
                else:
                    QMessageBox.warning(self, "Verification Failed", data.get('message', 'License verification failed'))
            else:
                data = response.json() if response.headers.get('content-type') == 'application/json' else {}
                QMessageBox.warning(self, "Verification Failed", data.get('message', 'License verification failed'))
                
        except requests.exceptions.RequestException as e:
            QMessageBox.critical(self, "Connection Error", f"Could not connect to server:\n{str(e)}")

# --- Custom Widgets ---
class ToggleSwitch(QCheckBox):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setCursor(Qt.CursorShape.PointingHandCursor)

class ClickableLabel(QLabel):
    doubleClicked = Signal()
    singleClicked = Signal()

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.setAlignment(Qt.AlignCenter)
        self.setCursor(Qt.PointingHandCursor)
        self.setProperty("class", "ClickableLabel")

    def mousePressEvent(self, event: QMouseEvent):
        self._mouse_press_pos = event.pos()

    def mouseReleaseEvent(self, event: QMouseEvent):
        if self._mouse_press_pos == event.pos() and event.button() == Qt.LeftButton:
            self.singleClicked.emit()

    def mouseDoubleClickEvent(self, event: QMouseEvent):
        if event.button() == Qt.LeftButton:
            self.doubleClicked.emit()

# --- Generator Page Base Class ---
class BaseGeneratorPage(QWidget):
    generationFinalized = Signal(dict)
    
    def __init__(self, table_name, parent=None):
        super().__init__(parent)
        self.table_name = table_name
        self.parent_window = parent

        # Initialize paths for all 4 script types
        self.script_paths = {
            'altium': os.path.join(os.path.expanduser("~"), "altium_scripts"),
            'allegro': os.path.join(os.path.expanduser("~"), "allegro_scripts"),
            'pads': os.path.join(os.path.expanduser("~"), "pads_scripts"),
            'xpedition': os.path.join(os.path.expanduser("~"), "xpedition_scripts")
        }
        
        self.setObjectName("GeneratorPage")
        layout = QGridLayout(self)
        layout.setContentsMargins(25, 25, 25, 25)
        layout.setSpacing(20)
        
        self.title_label = QLabel()
        layout.addWidget(self.title_label, 0, 0)
        
        input_frame = QFrame()
        self.form_layout = QFormLayout(input_frame)
        self.form_layout.setSpacing(12)
        self.form_layout.setLabelAlignment(Qt.AlignRight)
        self.input_fields = {}
        layout.addWidget(input_frame, 0, 0)
        
        right_panel_layout = QVBoxLayout()
        self.image_label = QSvgWidget()
        self.image_label.setMinimumSize(250, 300)
        self.image_label.setStyleSheet("background-color: #232730; border-radius: 8px;")
        right_panel_layout.addWidget(self.image_label)
        layout.addLayout(right_panel_layout, 0, 1)
        layout.setColumnStretch(1, 1)
        
        button_layout = QHBoxLayout()
        self.generate_button = QPushButton("Generate All Scripts")
        self.generate_button.setObjectName("GenerateButton")
        self.generate_button.setCursor(Qt.PointingHandCursor)
        self.generate_button.clicked.connect(self._on_generate_clicked)
        button_layout.addWidget(self.generate_button)
        button_layout.addStretch()
        layout.addLayout(button_layout, 2, 0, 1, 2)

    def _on_generate_clicked(self):
        """Generate scripts and submit data to Flask server"""
        data = self.collect_data()
        if not data.get("part_number") or not data.get("footprint_name"):
            QMessageBox.warning(self, "Input Error", "Part Number and Footprint Name are required.")
            return
        
        # Check license verification
        main_window = self.get_main_window()
        if not main_window or not main_window.verification_data:
            QMessageBox.warning(self, "License Error", "Please verify your license first from Settings > Account")
            return
        
        try:
            generated_files = []
            errors = []
            
            # Generate scripts for all 4 tools
            for script_type in ['altium', 'allegro', 'pads', 'xpedition']:
                try:
                    script_content, filename = self.generate_script_for_tool(data, script_type)
                    self._write_script_to_file(script_type, filename, script_content)
                    generated_files.append(f"{script_type.title()}: {filename}")
                except Exception as e:
                    errors.append(f"{script_type.title()}: {str(e)}")
            
            # Submit data to Flask server
            success = self._submit_to_flask_server(data)
            
            # Show results
            if generated_files:
                success_msg = "Successfully generated scripts:\n\n" + "\n".join(generated_files)
                if errors:
                    success_msg += f"\n\nErrors encountered:\n" + "\n".join(errors)
                if success:
                    success_msg += "\n\nData successfully saved to server."
                else:
                    success_msg += "\n\nWarning: Could not save data to server."
                QMessageBox.information(self, "Scripts Generated", success_msg)
                
                self.generationFinalized.emit({"data": data, "table_name": self.table_name})
            else:
                QMessageBox.critical(self, "Generation Failed", "Failed to generate any scripts:\n\n" + "\n".join(errors))
                
        except Exception as e:
            QMessageBox.critical(self, "Error", f"An error occurred during the process:\n\n{e}")

    def _submit_to_flask_server(self, data):
        """Submit footprint data to Flask server"""
        try:
            main_window = self.get_main_window()
            if not main_window or not main_window.verification_data:
                return False
                
            # Prepare data for submission
            submission_data = {
                "package_type": self.table_name,
                "part_number": data.get('part_number', ''),
                "footprint_name": data.get('footprint_name', ''),
                "specifications": data,
                "user_created": main_window.verification_data.get('username', 'Unknown'),
                "license_verification": main_window.verification_data
            }
            
            response = requests.post(
                f"{FLASK_BASE_URL}/api/footprint/add",
                json=submission_data,
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                return result.get('status') == 'success'
            else:
                print(f"Server error: {response.status_code}")
                return False
                
        except requests.exceptions.RequestException as e:
            print(f"Network error: {e}")
            return False
        except Exception as e:
            print(f"Submission error: {e}")
            return False

    def get_main_window(self):
        """Get the main window instance"""
        widget = self
        while widget:
            if isinstance(widget, MainWindow):
                return widget
            widget = widget.parent()
        return None

    def _write_script_to_file(self, script_type, filename, script_content):
        """Write script file to the appropriate output path"""
        output_path = self.script_paths.get(script_type)
        if not output_path:
            raise ValueError(f"Output path for {script_type} has not been set.")
        
        os.makedirs(output_path, exist_ok=True)
        output_filepath = os.path.join(output_path, filename)
        with open(output_filepath, "w") as f:
            f.write(script_content)

    def generate_script_for_tool(self, data, tool_type):
        """Generate script for specific tool - must be implemented by subclasses"""
        raise NotImplementedError("Each generator page must implement generate_script_for_tool")

    def set_script_paths(self, paths_dict):
        """Update all script output paths"""
        self.script_paths.update(paths_dict)
        
    def set_output_path(self, path):
        """Legacy method for backward compatibility"""
        self.script_paths['altium'] = path

    def collect_data(self):
        return {k.replace(" ", "_").lower().replace("(mm)", "").strip(): v.text() for k, v in self.input_fields.items()}

# --- Specific Generator Page Implementation ---
class DiscreteN(BaseGeneratorPage):
    """Generator page for discrete normal packages"""
    
    def __init__(self, parent=None):
        super().__init__("DiscreteN", parent)
        self.input_fields = {
            "Part Number": QLineEdit(),
            "Footprint Name": QLineEdit(),
            "Body Length (mm)": QLineEdit(),
            "Body Width (mm)": QLineEdit(),
            "Body Height (mm)": QLineEdit(),
            "Pad Length (mm)": QLineEdit(),
            "Pad Width (mm)": QLineEdit(),
            "Mask Expansion (mm)": QLineEdit(),
            "Paste Expansion (mm)": QLineEdit(),
            "Airgap (mm)": QLineEdit(),
        }
        for label, field in self.input_fields.items():
            self.form_layout.addRow(label, field)
        
        try:
            self.image_label.load("generator_resistor_chip.svg")
        except:
            pass

    def generate_script_for_tool(self, data, tool_type):
        """Generate script for specific tool type"""
        if tool_type == 'altium':
            return self._generate_altium_script(data)
        elif tool_type == 'allegro':
            return self._generate_allegro_script(data)
        elif tool_type == 'pads':
            return self._generate_pads_script(data)
        elif tool_type == 'xpedition':
            return self._generate_xpedition_script(data)
        else:
            raise ValueError(f"Unsupported tool type: {tool_type}")

    def _generate_altium_script(self, data):
        """Generate Altium Designer script"""
        try:
            part_number = data.get('part_number', '')
            footprint_name = data.get('footprint_name', '')
            body_l = float(data.get('body_length', 0))
            body_w = float(data.get('body_width', 0))
            pad_l = float(data.get('pad_length', 0))
            pad_w = float(data.get('pad_width', 0))
        except (ValueError, TypeError):
            raise ValueError("All dimensions must be valid numbers.")

        def mm_to_ul(val):
            return round(val / 0.000254)

        pad_offset = (body_l - pad_l) / 2
        pad_x = mm_to_ul(pad_offset)
        pad_w_ul = mm_to_ul(pad_w)
        pad_l_ul = mm_to_ul(pad_l)

        script = f"""# Created by Footprint Generator - Altium Designer
# Part Number: {part_number}
# Footprint: {footprint_name}
StartFootprints
Footprint (Name "{footprint_name}")
Pad (Name "1") (Location -{pad_x}, 0) (Surface True) (Rotation 0) (ExpandMask 0) (ExpandPaste 0)
PadShape (Size {pad_w_ul}, {pad_l_ul}) (Shape Rectangular) (Layer Top)
EndPad
Pad (Name "2") (Location {pad_x}, 0) (Surface True) (Rotation 0) (ExpandMask 0) (ExpandPaste 0)
PadShape (Size {pad_w_ul}, {pad_l_ul}) (Shape Rectangular) (Layer Top)
EndPad
Text (Location -75, -25) (Height 50) (Width 3) (Rotation 0) (Layer TopOverlay) (Value "RefDes")
Step (Name {footprint_name}.step)
EndFootprint
EndFootprints
"""
        return script, f"{part_number}_altium.txt"

    def _generate_allegro_script(self, data):
        """Generate Cadence Allegro script"""
        part_number = data.get('part_number', '')
        footprint_name = data.get('footprint_name', '')
        
        script = f"""# Allegro PCB Editor Script
# Part Number: {part_number}
# Footprint: {footprint_name}

create footprint {footprint_name}
shape add rect {data.get('pad_length', '0')} {data.get('pad_width', '0')}
pad add {data.get('body_length', '0')}/2 0 1 rect
pad add -{data.get('body_length', '0')}/2 0 2 rect
line add assembly {data.get('body_length', '0')}/2 {data.get('body_width', '0')}/2
line add assembly -{data.get('body_length', '0')}/2 {data.get('body_width', '0')}/2
text add refdes 0 {data.get('body_width', '0')}/2+0.5 \\$REFDES
done
"""
        return script, f"{part_number}_allegro.scr"

    def _generate_pads_script(self, data):
        """Generate Mentor Graphics PADS script"""
        part_number = data.get('part_number', '')
        footprint_name = data.get('footprint_name', '')
        
        script = f"""! PADS PowerPCB Script
! Part Number: {part_number}
! Footprint: {footprint_name}

*PART*
{footprint_name}

*PAD*
P1 {data.get('pad_length', '0')} {data.get('pad_width', '0')} R 0 0 {data.get('body_length', '0')}/2 0
P2 {data.get('pad_length', '0')} {data.get('pad_width', '0')} R 0 0 -{data.get('body_length', '0')}/2 0

*LINE*
15 0 {data.get('body_length', '0')}/2 {data.get('body_width', '0')}/2
15 0 -{data.get('body_length', '0')}/2 {data.get('body_width', '0')}/2

*TEXT*
0 0 {data.get('body_width', '0')}/2+1 0 \\$REFDES

*END*
"""
        return script, f"{part_number}_pads.asc"

    def _generate_xpedition_script(self, data):
        """Generate Mentor Graphics Xpedition script"""
        part_number = data.get('part_number', '')
        footprint_name = data.get('footprint_name', '')
        
        script = f"""# Xpedition PCB Script
# Part Number: {part_number}
# Footprint: {footprint_name}

cell new {footprint_name}
padstack new rect_{data.get('pad_length', '0')}x{data.get('pad_width', '0')}
layer TOP copper rectangle {data.get('pad_length', '0')} {data.get('pad_width', '0')}
padstack end
pin new 1 {data.get('body_length', '0')}/2 0 rect_{data.get('pad_length', '0')}x{data.get('pad_width', '0')}
pin new 2 -{data.get('body_length', '0')}/2 0 rect_{data.get('pad_length', '0')}x{data.get('pad_width', '0')}
text new SILKSCREEN_TOP 0 {data.get('body_width', '0')}/2+0.5 \\$REFDES
cell save
cell end
"""
        return script, f"{part_number}_xpedition.scr"

# Placeholder classes for other generator pages (implement as needed)
class DiscreteF(BaseGeneratorPage):
    def __init__(self, parent=None):
        super().__init__("DiscreteF", parent)

# ... Add other generator classes as needed

# --- Main Application Window ---
class MainWindow(QMainWindow):
    DEFAULT_CATEGORY_IMAGE_MAP = {
        "Discrete": "images/Chip2PinSM.svg",
        "Sot-23": "images/SOT23.svg",
        "Sot-143": "images/SOT143.svg",
        "TO Package": "images/DPAK.svg",
        "Dual Side": "images/SOIC.svg",
        "Dual with thermal": "images/SON.svg",
        "QF Package": "images/PQFP.svg",
        "QF Package with thermal": "images/QFN.svg",
        "QFN TWO ROW": "images/QFN2ROW.svg",
        "Connectors": "images/PLCC.svg",
        "Crystals": "images/PrecisionWireWound.svg",
        "BGA Package": "images/BGA.svg",
    }

    def __init__(self):
        super().__init__()
        self.setWindowTitle("Modern UI Footprint Generator")
        self.setGeometry(100, 100, 1000, 600)
        
        self.system_fonts = QFontDatabase.families()
        self.stroke_fonts = ["Default", "Sans Serif", "Serif"]
        
        # License verification data
        self.verification_data = None
        
        # Initialize script paths for all tools
        self.script_paths = {
            'altium': os.path.join(os.path.expanduser("~"), "altium_scripts"),
            'allegro': os.path.join(os.path.expanduser("~"), "allegro_scripts"),
            'pads': os.path.join(os.path.expanduser("~"), "pads_scripts"),
            'xpedition': os.path.join(os.path.expanduser("~"), "xpedition_scripts")
        }
        
        # Create directories if they don't exist
        for path in self.script_paths.values():
            os.makedirs(path, exist_ok=True)
        
        self.current_script_path = self.script_paths['altium']
        
        central_container = QWidget()
        self.main_layout = QHBoxLayout(central_container)
        self.main_layout.setContentsMargins(0, 0, 0, 0)
        self.main_layout.setSpacing(0)
        
        self.setCentralWidget(central_container)
        
        self.create_sidebar()
        self.create_main_content()
        self.load_stylesheet("style.qss")

    def load_stylesheet(self, filename):
        try:
            with open(filename, "r") as f:
                self.setStyleSheet(f.read())
        except FileNotFoundError:
            print(f"Stylesheet '{filename}' not found. Using default styles.")

    def create_sidebar(self):
        sidebar_container = QWidget()
        sidebar_container.setObjectName("Sidebar")
        sidebar_layout = QVBoxLayout(sidebar_container)
        sidebar_layout.setContentsMargins(0, 10, 0, 10)
        sidebar_layout.setSpacing(5)
        sidebar_layout.setAlignment(Qt.AlignTop)
        
        self.button_group = []
        for text, icon in self.get_sidebar_options().items():
            button = QPushButton(f"  {text}")
            button.setIcon(qtawesome.icon(icon, color='#d0d0d0'))
            button.setIconSize(QSize(20, 20))
            button.setCheckable(True)
            sidebar_layout.addWidget(button)
            self.button_group.append(button)

        self.button_group[0].setChecked(True)
        for button in self.button_group:
            button.clicked.connect(self.handle_sidebar_click)

        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setWidget(sidebar_container)
        scroll_area.setFixedWidth(250)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.main_layout.addWidget(scroll_area)

    def handle_sidebar_click(self):
        clicked_button = self.sender()
        for button in self.button_group:
            button.setChecked(button == clicked_button)
        self.stacked_widget.setCurrentIndex(self.button_group.index(clicked_button))

    def create_main_content(self):
        self.stacked_widget = QStackedWidget()
        self.main_layout.addWidget(self.stacked_widget)
        self.stacked_widget.addWidget(self.create_home_page())
        
        for page_title in list(self.get_sidebar_options().keys())[1:]:
            self.stacked_widget.addWidget(self.create_component_page(page_title))
        
        self.settings_page = self.create_settings_page()
        self.settings_page_index = self.stacked_widget.addWidget(self.settings_page)

        self.generator_pages = {}
        page_map = {
            ("Discrete", "Discrete Narmal"): DiscreteN,
            ("Discrete", "Discrete Fillet-Shape"): DiscreteF,
            # Add more mappings as needed
        }

        for (comp_type, opt_name), PageClass in page_map.items():
            page_instance = PageClass(self)
            page_instance.generationFinalized.connect(self.on_generation_finalized)
            page_instance.set_script_paths(self.script_paths)
            self.stacked_widget.addWidget(page_instance)
            self.generator_pages[(comp_type, opt_name)] = page_instance

    def on_generation_finalized(self, payload):
        """Handle generation completion"""
        print(f"Generated footprint: {payload['data']['footprint_name']} for {payload['table_name']}")

    def get_sidebar_options(self):
        return {
            "Home": "fa5s.home",
            "Discrete": "fa5s.sliders-h",
            "Sot-23": "fa5s.microchip",
            "Sot-143": "fa5s.satellite",
            "TO Package": "fa5s.battery-half",
            "Dual Side": "fa5s.clone",
            "Dual with thermal": "fa5s.fire",
            "QF Package": "fa5s.shapes",
            "QF with thermal": "fa5s.thermometer-half",
            "QFN TWO ROW": "fa5s.border-style",
            "Connectors": "fa5s.plug",
            "Crystals": "fa5s.icicles",
            "BGA Package": "fa5s.th",
        }

    def create_home_page(self):
        page = QWidget()
        layout = QGridLayout(page)
        layout.setContentsMargins(25, 25, 25, 25)
        
        top_bar_layout = QHBoxLayout()
        title = QLabel("Dashboard")
        title.setObjectName("HomePageTitle")
        top_bar_layout.addWidget(title)
        top_bar_layout.addStretch()
        
        settings_button = QPushButton()
        settings_button.setIcon(qtawesome.icon('fa5s.cog', color='#d0d0d0'))
        settings_button.setIconSize(QSize(24, 24))
        settings_button.setFixedSize(40, 40)
        settings_button.setCursor(Qt.PointingHandCursor)
        settings_button.clicked.connect(self.go_to_settings)
        top_bar_layout.addWidget(settings_button)
        
        layout.addLayout(top_bar_layout, 0, 0, 1, 4)
        
        # License status card
        license_status = "Verified" if self.verification_data else "Not Verified"
        license_icon = "fa5s.check-circle" if self.verification_data else "fa5s.times-circle"
        card1 = self.create_dashboard_card("License Status", license_status, license_icon)
        
        card2 = self.create_dashboard_card("Scripts Generated", "Local Files", "fa5s.file-code")
        card3 = self.create_dashboard_card("Server Status", "Flask Integration", "fa5s.server")
        
        layout.addWidget(card1, 1, 0)
        layout.addWidget(card2, 1, 1)
        layout.addWidget(card3, 1, 2)
        layout.setRowStretch(2, 1)
        
        return page

    def create_dashboard_card(self, title_text, value_text, icon_name):
        card = QFrame()
        card.setObjectName("DashboardCard")
        card_layout = QVBoxLayout(card)
        
        title_label = QLabel(title_text)
        title_label.setStyleSheet("font-size: 11pt; color: #a0a0a0;")
        
        value_layout = QHBoxLayout()
        icon_label = QLabel()
        icon_color = '#5d9afc' if 'check' in icon_name else '#ff6b6b' if 'times' in icon_name else '#5d9afc'
        icon_label.setPixmap(qtawesome.icon(icon_name, color=icon_color).pixmap(QSize(32, 32)))
        
        value_label = QLabel(value_text)
        value_label.setStyleSheet("font-size: 20pt; font-weight: bold;")
        
        value_layout.addWidget(icon_label)
        value_layout.addWidget(value_label)
        value_layout.addStretch()
        
        card_layout.addWidget(title_label)
        card_layout.addLayout(value_layout)
        
        return card

    def create_component_page(self, component_type):
        page = QWidget()
        layout = QGridLayout(page)
        layout.setContentsMargins(25, 25, 25, 25)

        title = QLabel(f"{component_type} Footprint")
        title.setObjectName("PageTitle")
        font = title.font()
        font.setPointSize(36)
        font.setBold(True)
        title.setFont(font)
        layout.addWidget(title, 0, 0, 1, 2)
        
        image_label = QSvgWidget()
        image_label.setMinimumSize(400, 400)
        image_label.setStyleSheet("background-color:#232730; border-radius:8px;")

        default_svg = self.DEFAULT_CATEGORY_IMAGE_MAP.get(component_type)
        if default_svg:
            try:
                image_label.load(default_svg)
            except:
                pass
        
        layout.addWidget(image_label, 1, 1, 2, 1)
        layout.setColumnStretch(1, 1)
        
        options_layout = QVBoxLayout()
        options_layout.setSpacing(15)

        options = {
            "Discrete": ["Discrete Narmal", "Discrete Fillet-Shape"],
            "Sot-23": ["Narmal", "Narmal with MP Expantion", "Fillet-Shape", "Fillet with MP Expantion"],
            # Add more options as needed
        }

        component_options = options.get(component_type, ["Option A", "Option B"])
                
        for option_text in component_options:
            option_label = ClickableLabel(option_text)
            option_label.setFixedWidth(300)
            option_label.singleClicked.connect(lambda checked=True, p=default_svg: image_label.load(default_svg) if default_svg else None)
            option_label.doubleClicked.connect(lambda checked=True, c=component_type, o=option_text: self.go_to_generator(c, o))
            options_layout.addWidget(option_label)
        
        options_layout.addStretch()
        layout.addLayout(options_layout, 1, 0)
        return page

    def create_settings_page(self):
        page_widget = QWidget()
        page_layout = QVBoxLayout(page_widget)
        page_layout.setContentsMargins(0, 0, 0, 0)

        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setObjectName("SettingsScrollArea")
        page_layout.addWidget(scroll_area)

        container_widget = QWidget()
        scroll_area.setWidget(container_widget)
        container_layout = QVBoxLayout(container_widget)
        container_layout.setContentsMargins(25, 25, 25, 25)
        container_layout.setAlignment(Qt.AlignmentFlag.AlignTop)
        container_layout.setSpacing(20)

        title = QLabel("Settings")
        title.setObjectName("PageTitle")
        container_layout.addWidget(title)

        tab_widget = QTabWidget()
        tab_widget.addTab(self._create_default_settings_tab(), "Default Settings")
        tab_widget.addTab(self._create_account_tab(), "Account")

        container_layout.addWidget(tab_widget)

        return page_widget

    def _create_default_settings_tab(self):
        tab_widget = QWidget()
        main_layout = QVBoxLayout(tab_widget)
        main_layout.setAlignment(Qt.AlignmentFlag.AlignTop)
        main_layout.setSpacing(15)

        # Script Output Paths Group
        paths_group = QGroupBox("Script Output Paths")
        paths_layout = QGridLayout(paths_group)
        
        # Add path settings for each tool
        tool_names = ['Altium', 'Allegro', 'PADS', 'Xpedition']
        self.path_edits = {}
        
        for i, tool in enumerate(tool_names):
            tool_key = tool.lower()
            paths_layout.addWidget(QLabel(f"{tool} Script Path:"), i, 0)
            path_edit = QLineEdit(self.script_paths[tool_key])
            path_edit.setReadOnly(True)
            self.path_edits[tool_key] = path_edit
            
            browse_btn = QPushButton("Browse")
            browse_btn.clicked.connect(lambda checked, t=tool_key: self.browse_for_script_path(t))
            
            paths_layout.addWidget(path_edit, i, 1)
            paths_layout.addWidget(browse_btn, i, 2)
        
        main_layout.addWidget(paths_group)
        return tab_widget

    def _create_account_tab(self):
        """Create account/license verification tab"""
        tab_widget = QWidget()
        main_layout = QVBoxLayout(tab_widget)
        main_layout.setAlignment(Qt.AlignmentFlag.AlignTop)
        main_layout.setSpacing(15)

        # License Verification Group
        license_group = QGroupBox("License Verification")
        license_layout = QGridLayout(license_group)
        
        # Status
        license_layout.addWidget(QLabel("Status:"), 0, 0)
        self.license_status_label = QLabel("Not Verified")
        if self.verification_data:
            self.license_status_label.setText("Verified")
            self.license_status_label.setStyleSheet("color: green; font-weight: bold;")
        else:
            self.license_status_label.setStyleSheet("color: red; font-weight: bold;")
        license_layout.addWidget(self.license_status_label, 0, 1)
        
        # User info
        if self.verification_data:
            license_layout.addWidget(QLabel("Username:"), 1, 0)
            license_layout.addWidget(QLabel(self.verification_data.get('username', 'Unknown')), 1, 1)
            
            license_layout.addWidget(QLabel("Email:"), 2, 0)
            license_layout.addWidget(QLabel(self.verification_data.get('email', 'Unknown')), 2, 1)
            
            license_layout.addWidget(QLabel("License:"), 3, 0)
            license_layout.addWidget(QLabel(self.verification_data.get('license_number', 'Unknown')), 3, 1)
        
        # Verify/Clear buttons
        button_layout = QHBoxLayout()
        
        self.verify_button = QPushButton("Verify License")
        self.verify_button.clicked.connect(self.show_license_verification_dialog)
        button_layout.addWidget(self.verify_button)
        
        self.clear_button = QPushButton("Clear License")
        self.clear_button.clicked.connect(self.clear_license)
        self.clear_button.setEnabled(bool(self.verification_data))
        button_layout.addWidget(self.clear_button)
        
        button_layout.addStretch()
        license_layout.addLayout(button_layout, 4, 0, 1, 2)
        
        main_layout.addWidget(license_group)
        
        # Server Settings Group
        server_group = QGroupBox("Server Settings")
        server_layout = QFormLayout(server_group)
        
        self.server_url_edit = QLineEdit(FLASK_BASE_URL)
        server_layout.addRow("Flask Server URL:", self.server_url_edit)
        
        test_button = QPushButton("Test Connection")
        test_button.clicked.connect(self.test_server_connection)
        server_layout.addRow("", test_button)
        
        main_layout.addWidget(server_group)
        
        return tab_widget

    def show_license_verification_dialog(self):
        """Show license verification dialog"""
        dialog = LicenseVerificationDialog(self)
        if dialog.exec() == QDialog.Accepted:
            self.verification_data = dialog.verification_data
            self.update_license_ui()

    def clear_license(self):
        """Clear license verification"""
        self.verification_data = None
        self.update_license_ui()
        QMessageBox.information(self, "License Cleared", "License verification cleared")

    def update_license_ui(self):
        """Update license UI elements"""
        if hasattr(self, 'license_status_label'):
            if self.verification_data:
                self.license_status_label.setText("Verified")
                self.license_status_label.setStyleSheet("color: green; font-weight: bold;")
                self.verify_button.setText("Re-verify License")
                self.clear_button.setEnabled(True)
            else:
                self.license_status_label.setText("Not Verified")
                self.license_status_label.setStyleSheet("color: red; font-weight: bold;")
                self.verify_button.setText("Verify License")
                self.clear_button.setEnabled(False)

    def test_server_connection(self):
        """Test connection to Flask server"""
        server_url = self.server_url_edit.text()
        try:
            response = requests.get(f"{server_url}/api/health", timeout=5)
            if response.status_code == 200:
                QMessageBox.information(self, "Connection Test", "Successfully connected to server!")
            else:
                QMessageBox.warning(self, "Connection Test", f"Server responded with status code: {response.status_code}")
        except requests.exceptions.RequestException as e:
            QMessageBox.critical(self, "Connection Test", f"Failed to connect to server:\n{str(e)}")
        
    def go_to_generator(self, component_type, option_name):
        page_widget = self.generator_pages.get((component_type, option_name))
        if page_widget:
            page_widget.set_output_path(self.current_script_path)
            self.stacked_widget.setCurrentWidget(page_widget)
        else:
            QMessageBox.information(self, "Not Implemented", f"The generator for '{option_name}' is not yet available.")

    def go_to_settings(self):
        self.stacked_widget.setCurrentIndex(self.settings_page_index)
        for button in self.button_group:
            button.setChecked(False)

    def browse_for_script_path(self, script_type):
        """Browse for script output path for specific tool type"""
        current_path = self.script_paths.get(script_type, os.path.expanduser("~"))
        directory = QFileDialog.getExistingDirectory(
            self, f"Select {script_type.title()} Script Output Folder", current_path
        )
        if directory:
            self.script_paths[script_type] = directory
            self.path_edits[script_type].setText(directory)
            
            if script_type == 'altium':
                self.current_script_path = directory
            
            for page in self.generator_pages.values():
                page.set_script_paths(self.script_paths)
            
            QMessageBox.information(
                self, "Path Set", 
                f"{script_type.title()} script output path has been set to:\n{directory}"
            )

# --- Application Entry Point ---
if __name__ == "__main__":
    if not os.path.exists("images"):
        os.makedirs("images")
        print("Created 'images' directory. Please add placeholder SVG images for the best experience.")
    
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())
