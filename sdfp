# --- CRITICAL FIX: SET QT_API ---
# This line MUST be at the very top, before any other imports.
import os
os.environ['QT_API'] = 'pyside6'
# --- END FIX ---


import sys
import sqlite3
import qtawesome
import json

# Add these imports after the existing imports
import struct
import json
import math

from PySide6.QtCore import (Qt, QSize, Signal, QPoint) # Signal is the equivalent of pyqtSignal
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,QComboBox,QGroupBox,QCheckBox,
    QPushButton, QStackedWidget, QLabel, QLineEdit, QGridLayout,QTabWidget,
    QFrame, QScrollArea, QSizePolicy, QFileDialog, QMessageBox, QFormLayout,
    QTextEdit, QButtonGroup # <-- ADD QButtonGroup HERE
)
from PySide6.QtGui import QPixmap, QIcon, QMouseEvent, QClipboard, QFontDatabase # <-- ADD QFontDatabase
from PySide6.QtSvgWidgets import QSvgWidget

# --- Constants ---
DATABASE_FILE = "footprint_data.db"
# --- DEFINE THE CUSTOM WIDGET HERE ---
class ToggleSwitch(QCheckBox):
    """A custom toggle switch widget. Its appearance is defined in the stylesheet."""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setCursor(Qt.CursorShape.PointingHandCursor)

class ClickableLabel(QLabel):
    """A QLabel that emits signals for single and double clicks."""
    doubleClicked = Signal()
    singleClicked = Signal()

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.setAlignment(Qt.AlignCenter)
        self.setCursor(Qt.PointingHandCursor)
        self.setProperty("class", "ClickableLabel")

    def mousePressEvent(self, event: QMouseEvent):
        self._mouse_press_pos = event.pos()

    def mouseReleaseEvent(self, event: QMouseEvent):
        if self._mouse_press_pos == event.pos() and event.button() == Qt.LeftButton:
            self.singleClicked.emit()

    def mouseDoubleClickEvent(self, event: QMouseEvent):
        if event.button() == Qt.LeftButton:
            self.doubleClicked.emit()

# --- Generator Page Base Class ---
class BaseGeneratorPage(QWidget):
    """
    A base class that encapsulates generation AND file-saving logic.
    Each page is a self-sufficient unit that generates scripts for all 4 tools.
    """
    generationFinalized = Signal(dict)
    
    def __init__(self, table_name, parent=None):
        super().__init__(parent)
        self.table_name = table_name

        # Initialize paths for all 4 script types
        self.script_paths = {
            'altium': os.path.join(os.path.expanduser("~"), "altium_scripts"),
            'allegro': os.path.join(os.path.expanduser("~"), "allegro_scripts"),
            'pads': os.path.join(os.path.expanduser("~"), "pads_scripts"),
            'xpedition': os.path.join(os.path.expanduser("~"), "xpedition_scripts")
        }
        
        self.setObjectName("GeneratorPage")
        layout = QGridLayout(self)
        layout.setContentsMargins(25, 25, 25, 25)
        layout.setSpacing(20)
        
        self.title_label = QLabel()
        layout.addWidget(self.title_label, 0, 0)
        
        input_frame = QFrame()
        self.form_layout = QFormLayout(input_frame)
        self.form_layout.setSpacing(12)
        self.form_layout.setLabelAlignment(Qt.AlignRight)
        self.input_fields = {}
        layout.addWidget(input_frame, 0, 0)
        
        right_panel_layout = QVBoxLayout()
        self.image_label = QSvgWidget()
        self.image_label.setMinimumSize(250, 300)
        self.image_label.setStyleSheet("background-color: #232730; border-radius: 8px;")
        right_panel_layout.addWidget(self.image_label)
        layout.addLayout(right_panel_layout, 0, 1)
        layout.setColumnStretch(1, 1)
        
        button_layout = QHBoxLayout()
        self.generate_button = QPushButton("Generate All Scripts")
        self.generate_button.setObjectName("GenerateButton")
        self.generate_button.setCursor(Qt.PointingHandCursor)
        self.generate_button.clicked.connect(self._on_generate_clicked)
        button_layout.addWidget(self.generate_button)
        button_layout.addStretch()
        layout.addLayout(button_layout, 2, 0, 1, 2)

    def _on_generate_clicked(self):
        """Generate scripts for all 4 tools simultaneously"""
        data = self.collect_data()
        if not data.get("part_number") or not data.get("footprint_name"):
            QMessageBox.warning(self, "Input Error", "Part Number and Footprint Name are required.")
            return
        
        try:
            generated_files = []
            errors = []
            
            # Generate scripts for all 4 tools
            for script_type in ['altium', 'allegro', 'pads', 'xpedition']:
                try:
                    script_content, filename = self.generate_script_for_tool(data, script_type)
                    self._write_script_to_file(script_type, filename, script_content)
                    generated_files.append(f"{script_type.title()}: {filename}")
                except Exception as e:
                    errors.append(f"{script_type.title()}: {str(e)}")
            
            # Show results
            if generated_files:
                success_msg = "Successfully generated scripts:\n\n" + "\n".join(generated_files)
                if errors:
                    success_msg += f"\n\nErrors encountered:\n" + "\n".join(errors)
                QMessageBox.information(self, "Scripts Generated", success_msg)
                
                # Emit with table name
                self.generationFinalized.emit({"data": data, "table_name": self.table_name})

            else:
                QMessageBox.critical(self, "Generation Failed", "Failed to generate any scripts:\n\n" + "\n".join(errors))
                
        except Exception as e:
            QMessageBox.critical(self, "Error", f"An error occurred during the process:\n\n{e}")

    def _write_script_to_file(self, script_type, filename, script_content):
        """Write script file to the appropriate output path"""
        output_path = self.script_paths.get(script_type)
        if not output_path:
            raise ValueError(f"Output path for {script_type} has not been set.")
        
        os.makedirs(output_path, exist_ok=True)
        output_filepath = os.path.join(output_path, filename)
        with open(output_filepath, "w") as f:
            f.write(script_content)

    def generate_script_for_tool(self, data, tool_type):
        """Generate script for specific tool - must be implemented by subclasses"""
        raise NotImplementedError("Each generator page must implement generate_script_for_tool")

    def set_script_paths(self, paths_dict):
        """Update all script output paths"""
        self.script_paths.update(paths_dict)
        
    # Keep backward compatibility
    def set_output_path(self, path):
        """Legacy method for backward compatibility"""
        self.script_paths['altium'] = path

    def collect_data(self):
        return {k.replace(" ", "_").lower().replace("(mm)", "").strip(): v.text() for k, v in self.input_fields.items()}

# --- Specific Generator Page Implementations ---

class DiscreteN(BaseGeneratorPage):
    """Generator page for discrete normal packages"""
    
    def __init__(self, parent=None):
        super().__init__("DiscreteN", parent)  # Pass table name
        self.input_fields = {
            "Part Number": QLineEdit(),
            "Footprint Name": QLineEdit(),
            "Body Length (mm)": QLineEdit(),
            "Body Width (mm)": QLineEdit(),
            "Body Height (mm)": QLineEdit(),
            "Pad Length (mm)": QLineEdit(),
            "Pad Width (mm)": QLineEdit(),
            "Mask Expansion (mm)": QLineEdit(),
            "Paste Expansion (mm)": QLineEdit(),
            "Airgap (mm)": QLineEdit(),
        }
        for label, field in self.input_fields.items():
            self.form_layout.addRow(label, field)
        
        self.image_label.load("generator_resistor_chip.svg")

    def generate_script_for_tool(self, data, tool_type):
        """Generate script for specific tool type"""
        if tool_type == 'altium':
            return self._generate_altium_script(data)
        elif tool_type == 'allegro':
            return self._generate_allegro_script(data)
        elif tool_type == 'pads':
            return self._generate_pads_script(data)
        elif tool_type == 'xpedition':
            return self._generate_xpedition_script(data)
        else:
            raise ValueError(f"Unsupported tool type: {tool_type}")

    def _generate_altium_script(self, data):
        """Generate Altium Designer script (Ultra Librarian format)"""
        try:
            part_number = data.get('part_number', '')
            footprint_name = data.get('footprint_name', '')
            body_l = float(data.get('body_length', 0))
            body_w = float(data.get('body_width', 0))
            pad_l = float(data.get('pad_length', 0))
            pad_w = float(data.get('pad_width', 0))
            mask_expansion = float(data.get('mask_expansion', 0))
            paste_expansion = float(data.get('paste_expansion', 0))
            airgap = float(data.get('airgap', 0))
        except (ValueError, TypeError):
            raise ValueError("All dimensions must be valid numbers.")

        def mm_to_ul(val):
            return round(val / 0.000254)

        pad_offset = (body_l - pad_l) / 2
        pad_x = mm_to_ul(pad_offset)
        pad_w_ul = mm_to_ul(pad_w)
        pad_l_ul = mm_to_ul(pad_l)

        script = f"""# Created by Footprint Generator - Altium Designer
# Part Number: {part_number}
# Footprint: {footprint_name}
StartFootprints
Footprint (Name "{footprint_name}")
Pad (Name "1") (Location -{pad_x}, 0) (Surface True) (Rotation 0) (ExpandMask 0) (ExpandPaste 0)
PadShape (Size {pad_w_ul}, {pad_l_ul}) (Shape Rectangular) (Layer Top)
EndPad
Pad (Name "2") (Location {pad_x}, 0) (Surface True) (Rotation 0) (ExpandMask 0) (ExpandPaste 0)
PadShape (Size {pad_w_ul}, {pad_l_ul}) (Shape Rectangular) (Layer Top)
EndPad
Text (Location -75, -25) (Height 50) (Width 3) (Rotation 0) (Layer TopOverlay) (Value "RefDes")
Step (Name {footprint_name}.step)
EndFootprint
EndFootprints
"""
        return script, f"{part_number}_altium.txt"

    def _generate_allegro_script(self, data):
        """Generate Cadence Allegro script"""
        part_number = data.get('part_number', '')
        footprint_name = data.get('footprint_name', '')
        
        script = f"""# Allegro PCB Editor Script
# Part Number: {part_number}
# Footprint: {footprint_name}

# Create footprint
create footprint {footprint_name}

# Add pads
shape add rect {data.get('pad_length', '0')} {data.get('pad_width', '0')}
pad add {data.get('body_length', '0')}/2 0 1 rect
pad add -{data.get('body_length', '0')}/2 0 2 rect

# Add assembly outline
line add assembly {data.get('body_length', '0')}/2 {data.get('body_width', '0')}/2
line add assembly -{data.get('body_length', '0')}/2 {data.get('body_width', '0')}/2

# Add reference designator
text add refdes 0 {data.get('body_width', '0')}/2+0.5 \\$REFDES

done
"""
        return script, f"{part_number}_allegro.scr"

    def _generate_pads_script(self, data):
        """Generate Mentor Graphics PADS script"""
        part_number = data.get('part_number', '')
        footprint_name = data.get('footprint_name', '')
        
        script = f"""! PADS PowerPCB Script
! Part Number: {part_number}
! Footprint: {footprint_name}

*PART*
{footprint_name}

*PAD*
P1 {data.get('pad_length', '0')} {data.get('pad_width', '0')} R 0 0 {data.get('body_length', '0')}/2 0
P2 {data.get('pad_length', '0')} {data.get('pad_width', '0')} R 0 0 -{data.get('body_length', '0')}/2 0

*LINE*
15 0 {data.get('body_length', '0')}/2 {data.get('body_width', '0')}/2
15 0 -{data.get('body_length', '0')}/2 {data.get('body_width', '0')}/2
15 0 -{data.get('body_length', '0')}/2 -{data.get('body_width', '0')}/2
15 0 {data.get('body_length', '0')}/2 -{data.get('body_width', '0')}/2
15 0 {data.get('body_length', '0')}/2 {data.get('body_width', '0')}/2

*TEXT*
0 0 {data.get('body_width', '0')}/2+1 0 \\$REFDES

*END*
"""
        return script, f"{part_number}_pads.asc"

    def _generate_xpedition_script(self, data):
        """Generate Mentor Graphics Xpedition script"""
        part_number = data.get('part_number', '')
        footprint_name = data.get('footprint_name', '')
        
        script = f"""# Xpedition PCB Script
# Part Number: {part_number}
# Footprint: {footprint_name}

# Create new cell
cell new {footprint_name}

# Define pad stack
padstack new rect_{data.get('pad_length', '0')}x{data.get('pad_width', '0')}
layer TOP copper rectangle {data.get('pad_length', '0')} {data.get('pad_width', '0')}
padstack end

# Place pads
pin new 1 {data.get('body_length', '0')}/2 0 rect_{data.get('pad_length', '0')}x{data.get('pad_width', '0')}
pin new 2 -{data.get('body_length', '0')}/2 0 rect_{data.get('pad_length', '0')}x{data.get('pad_width', '0')}

# Add assembly outline
line new ASSEMBLY {data.get('body_length', '0')}/2 {data.get('body_width', '0')}/2 -{data.get('body_length', '0')}/2 {data.get('body_width', '0')}/2
line new ASSEMBLY -{data.get('body_length', '0')}/2 {data.get('body_width', '0')}/2 -{data.get('body_length', '0')}/2 -{data.get('body_width', '0')}/2
line new ASSEMBLY -{data.get('body_length', '0')}/2 -{data.get('body_width', '0')}/2 {data.get('body_length', '0')}/2 -{data.get('body_width', '0')}/2
line new ASSEMBLY {data.get('body_length', '0')}/2 -{data.get('body_width', '0')}/2 {data.get('body_length', '0')}/2 {data.get('body_width', '0')}/2

# Add reference designator
text new SILKSCREEN_TOP 0 {data.get('body_width', '0')}/2+0.5 \\$REFDES

cell save
cell end
"""
        return script, f"{part_number}_xpedition.scr"    


class DiscreteF(BaseGeneratorPage):

    """Generator page for chip resistors with its own script logic and file format."""
    def __init__(self, parent=None):
        super().__init__(parent)

class DiscreteFMPE(BaseGeneratorPage):
    """Generator page for chip resistors with its own script logic and file format."""
    def __init__(self, parent=None):
        super().__init__(parent)

class Sot23N(BaseGeneratorPage):
    """Generator page for chip resistors with its own script logic and file format."""
    def __init__(self, parent=None):
        super().__init__(parent)

class Sot23NMPE(BaseGeneratorPage):
    """Generator page for chip resistors with its own script logic and file format."""
    def __init__(self, parent=None):
        super().__init__(parent)

class Sot23F(BaseGeneratorPage):
    """Generator page for chip resistors with its own script logic and file format."""
    def __init__(self, parent=None):
        super().__init__(parent)

class Sot23FMPE(BaseGeneratorPage):
    """Generator page for chip resistors with its own script logic and file format."""
    def __init__(self, parent=None):
        super().__init__(parent)

class TOPackageN(BaseGeneratorPage):
    """Generator page for chip resistors with its own script logic and file format."""
    def __init__(self, parent=None):
        super().__init__(parent)

class TOPackageNMPE(BaseGeneratorPage):
    """Generator page for chip resistors with its own script logic and file format."""
    def __init__(self, parent=None):
        super().__init__(parent)

class TOPackageF(BaseGeneratorPage):
    """Generator page for chip resistors with its own script logic and file format."""
    def __init__(self, parent=None):
        super().__init__(parent)

class TOPackageFMPE(BaseGeneratorPage):
    """Generator page for chip resistors with its own script logic and file format."""
    def __init__(self, parent=None):
        super().__init__(parent)

class DualSideN(BaseGeneratorPage):
    """Generator page for chip resistors with its own script logic and file format."""
    def __init__(self, parent=None):
        super().__init__(parent)

class DualSideNMPE(BaseGeneratorPage):
    """Generator page for chip resistors with its own script logic and file format."""
    def __init__(self, parent=None):
        super().__init__(parent)

class DualSideF(BaseGeneratorPage):
    """Generator page for chip resistors with its own script logic and file format."""
    def __init__(self, parent=None):
        super().__init__(parent)

class DualSideFMPE(BaseGeneratorPage):
    """Generator page for chip resistors with its own script logic and file format."""
    def __init__(self, parent=None):
        super().__init__(parent)

class DualSideTN(BaseGeneratorPage):
    """Generator page for chip resistors with its own script logic and file format."""
    def __init__(self, parent=None):
        super().__init__(parent)

class DualSideTNMPE(BaseGeneratorPage):
    """Generator page for chip resistors with its own script logic and file format."""
    def __init__(self, parent=None):
        super().__init__(parent)

class DualSideTF(BaseGeneratorPage):
    """Generator page for chip resistors with its own script logic and file format."""
    def __init__(self, parent=None):
        super().__init__(parent)

class DualSideTFMPE(BaseGeneratorPage):
    """Generator page for chip resistors with its own script logic and file format."""
    def __init__(self, parent=None):
        super().__init__(parent)


# --- Main Application Window ---
class MainWindow(QMainWindow):
    """The main window that orchestrates all pages and database interactions."""

    # Map component categories to a default image to show when the page is first opened.
    DEFAULT_CATEGORY_IMAGE_MAP = {
        "Discrete": "images/Chip2PinSM.svg",
        "Sot-23": "images/SOT23.svg",  # Example: Add sot_package.svg to images/
        "Sot-143": "images/SOT143.svg",  # Example: Add sot_143.svg to images/, etc.
        "TO Package": "images/DPAK.svg",  # Example: Add to_package.svg to images/
        "Dual Side": "images/SOIC.svg",  # etc.
        "Dual with thermal": "images/SON.svg",
        "QF Package": "images/PQFP.svg",
        "QF Package with thermal": "images/QFN.svg",
        "QFN TWO ROW": "images/QFN2ROW.svg",
        "Connectors": "images/PLCC.svg",
        "Crystals": "images/PrecisionWireWound.svg",
        "BGA Package": "images/BGA.svg",
    }

    def __init__(self):
        super().__init__()
        self.setWindowTitle("Modern UI Footprint Generator")
        self.setGeometry(100, 100, 1000, 600)
        
        self.system_fonts = QFontDatabase.families()
        self.stroke_fonts = ["Default", "Sans Serif", "Serif"]
        
        # Initialize script paths for all tools
        self.script_paths = {
            'altium': os.path.join(os.path.expanduser("~"), "altium_scripts"),
            'allegro': os.path.join(os.path.expanduser("~"), "allegro_scripts"),
            'pads': os.path.join(os.path.expanduser("~"), "pads_scripts"),
            'xpedition': os.path.join(os.path.expanduser("~"), "xpedition_scripts")
        }
        
        # Create directories if they don't exist
        for path in self.script_paths.values():
            os.makedirs(path, exist_ok=True)
        
        self.current_script_path = self.script_paths['altium']  # Backward compatibility
        
        self.init_database()
        
        central_container = QWidget()
        self.main_layout = QHBoxLayout(central_container)
        self.main_layout.setContentsMargins(0, 0, 0, 0)
        self.main_layout.setSpacing(0)
        
        self.setCentralWidget(central_container)
        
        self.create_sidebar()
        self.create_main_content()
        self.load_stylesheet("style.qss")

    def load_stylesheet(self, filename):
        try:
            with open(filename, "r") as f:
                self.setStyleSheet(f.read())
        except FileNotFoundError:
            print(f"Stylesheet '{filename}' not found. Using default styles.")

    def init_database(self):
        conn = sqlite3.connect(DATABASE_FILE)
        cursor = conn.cursor()
        
        # Discrete packages table
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS DiscreteN (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                part_number TEXT NOT NULL,
                footprint_name TEXT,
                component_type TEXT DEFAULT 'DiscreteN',
                body_length REAL,
                body_width REAL,
                body_height REAL,
                pad_length REAL,
                pad_width REAL,
                mask_expansion REAL,
                paste_expansion REAL,
                airgap REAL,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS DiscreteF (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                part_number TEXT NOT NULL,
                footprint_name TEXT,
                component_type TEXT DEFAULT 'DiscreteF',
                body_length REAL,
                body_width REAL,
                body_height REAL,
                pad_length REAL,
                pad_width REAL,
                fillet_radius REAL,
                mask_expansion REAL,
                paste_expansion REAL,
                airgap REAL,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''')
        
        # SOT-23 packages tables
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS Sot23N (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                part_number TEXT NOT NULL,
                footprint_name TEXT,
                component_type TEXT DEFAULT 'Sot23N',
                body_length REAL,
                body_width REAL,
                body_height REAL,
                pitch REAL,
                pad_length REAL,
                pad_width REAL,
                mask_expansion REAL,
                paste_expansion REAL,
                pin_count INTEGER DEFAULT 3,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS Sot23NMPE (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                part_number TEXT NOT NULL,
                footprint_name TEXT,
                component_type TEXT DEFAULT 'Sot23NMPE',
                body_length REAL,
                body_width REAL,
                body_height REAL,
                pitch REAL,
                pad_length REAL,
                pad_width REAL,
                mask_expansion REAL,
                paste_expansion REAL,
                mp_expansion REAL,
                pin_count INTEGER DEFAULT 3,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS Sot23F (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                part_number TEXT NOT NULL,
                footprint_name TEXT,
                component_type TEXT DEFAULT 'Sot23F',
                body_length REAL,
                body_width REAL,
                body_height REAL,
                pitch REAL,
                pad_length REAL,
                pad_width REAL,
                fillet_radius REAL,
                mask_expansion REAL,
                paste_expansion REAL,
                pin_count INTEGER DEFAULT 3,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS Sot23FMPE (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                part_number TEXT NOT NULL,
                footprint_name TEXT,
                component_type TEXT DEFAULT 'Sot23FMPE',
                body_length REAL,
                body_width REAL,
                body_height REAL,
                pitch REAL,
                pad_length REAL,
                pad_width REAL,
                fillet_radius REAL,
                mask_expansion REAL,
                paste_expansion REAL,
                mp_expansion REAL,
                pin_count INTEGER DEFAULT 3,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''')
        
        # TO Package tables
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS TOPackageN (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                part_number TEXT NOT NULL,
                footprint_name TEXT,
                component_type TEXT DEFAULT 'TOPackageN',
                body_length REAL,
                body_width REAL,
                body_height REAL,
                tab_length REAL,
                tab_width REAL,
                pitch REAL,
                pad_length REAL,
                pad_width REAL,
                mask_expansion REAL,
                paste_expansion REAL,
                pin_count INTEGER,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP

            )''')
        
        # Continue with other package types...
        # Dual Side packages
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS DualSideN (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                part_number TEXT NOT NULL,
                footprint_name TEXT,
                component_type TEXT DEFAULT 'DualSideN',
                body_length REAL,
                body_width REAL,
                body_height REAL,
                pitch REAL,
                pad_length REAL,
                pad_width REAL,
                row_spacing REAL,
                mask_expansion REAL,
                paste_expansion REAL,
                pin_count INTEGER,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''')
        
        # Add more tables for other package types as needed...
        
        conn.commit()
        conn.close()

    def create_sidebar(self):
        sidebar_container = QWidget()
        sidebar_container.setObjectName("Sidebar")
        sidebar_layout = QVBoxLayout(sidebar_container)
        sidebar_layout.setContentsMargins(0, 10, 0, 10)
        sidebar_layout.setSpacing(5)
        sidebar_layout.setAlignment(Qt.AlignTop)
        
        self.button_group = []
        for text, icon in self.get_sidebar_options().items():
            button = QPushButton(f"  {text}")
            button.setIcon(qtawesome.icon(icon, color='#d0d0d0'))
            button.setIconSize(QSize(20, 20))
            button.setCheckable(True)
            sidebar_layout.addWidget(button)
            self.button_group.append(button)

        self.button_group[0].setChecked(True)
        for button in self.button_group:
            button.clicked.connect(self.handle_sidebar_click)

        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setWidget(sidebar_container)
        scroll_area.setFixedWidth(250)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.main_layout.addWidget(scroll_area)

    def handle_sidebar_click(self):
        clicked_button = self.sender()
        for button in self.button_group:
            button.setChecked(button == clicked_button)
        self.stacked_widget.setCurrentIndex(self.button_group.index(clicked_button))

    def create_main_content(self):
        self.stacked_widget = QStackedWidget()
        self.main_layout.addWidget(self.stacked_widget)
        self.stacked_widget.addWidget(self.create_home_page())
        
        for page_title in list(self.get_sidebar_options().keys())[1:]:
            self.stacked_widget.addWidget(self.create_component_page(page_title))
        
        self.settings_page = self.create_settings_page()
        self.settings_page_index = self.stacked_widget.addWidget(self.settings_page)

        self.generator_pages = {}
        page_map = {
            ("Discrete", "Discrete Narmal"): DiscreteN,
            ("Discrete", "Discrete Fillet-Shape"): DiscreteF,
            ("Sot-23", "Narmal"): Sot23N,
            ("Sot-23", "Narmal with MP Expantion"): Sot23NMPE,
            ("Sot-23", "Fillet-Shape"): Sot23F,
            ("Sot-23", "Fillet with MP Expantion"): Sot23FMPE,
            ("TO Package", "Narmal"): TOPackageN,
            ("TO Package", "Narmal with MP Expantion"): TOPackageNMPE,
            ("TO Package", "Fillet-Shape"): TOPackageF,
            ("TO Package", "Fillet with MP Expantion"): TOPackageFMPE,
            ("Dual Side", "Narmal"): DualSideN,
            ("Dual Side", "Narmal with MP Expantion"): DualSideNMPE,
            ("Dual Side", "Fillet-Shape"): DualSideF,
            ("Dual Side", "Fillet with MP Expantion"): DualSideFMPE,
            ("Dual with thermal", "Narmal"): DualSideTN,
            ("Dual with thermal", "Narmal with MP Expantion"): DualSideTNMPE,
            ("Dual with thermal", "Fillet-Shape"): DualSideTF,
            ("Dual with thermal", "Fillet with MP Expantion"): DualSideTFMPE,
            # Add more mappings as needed for other component types/options
            }



        for (comp_type, opt_name), PageClass in page_map.items():
            page_instance = PageClass()
            page_instance.generationFinalized.connect(self.on_generation_finalized)  # ✅ FIXED
            page_instance.set_script_paths(self.script_paths)  # Set all paths
            self.stacked_widget.addWidget(page_instance)
            self.generator_pages[(comp_type, opt_name)] = page_instance

    def on_generation_finalized(self, payload):
        self.handle_save_to_database(payload["data"], payload["table_name"])


    def handle_save_to_database(self, data, table_name):
        """Receives data and table name, saves to the specific table"""
        try:
            if table_name == "DiscreteN":
                self.save_discrete_n_to_db(data)
            elif table_name == "DiscreteF":
                self.save_discrete_f_to_db(data)
            elif table_name == "Sot23N":
                self.save_sot23_n_to_db(data)
            elif table_name == "Sot23NMPE":
                self.save_sot23_nmpe_to_db(data)
            elif table_name == "Sot23F":
                self.save_sot23_f_to_db(data)
            elif table_name == "Sot23FMPE":
                self.save_sot23_fmpe_to_db(data)
            elif table_name == "TOPackageN":
                self.save_to_package_n_to_db(data)
            elif table_name == "DualSideN":
                self.save_dual_side_n_to_db(data)
            # Add more package types as needed
            else:
                raise ValueError(f"Unknown table name: {table_name}")
                
            print(f"Successfully saved {data['footprint_name']} to {table_name} table.")
        except Exception as e:
            QMessageBox.critical(self, "Database Error", f"The script files were saved, but a database error occurred:\n\n{e}")

    def save_discrete_n_to_db(self, data):
        """Save DiscreteN package data to DiscreteN table"""
        conn = sqlite3.connect(DATABASE_FILE)
        cursor = conn.cursor()
        
        part_number = data.get('part_number', 'N/A')
        
        cursor.execute('''
            INSERT INTO DiscreteN (
                part_number, footprint_name, component_type,
                body_length, body_width, body_height,
                pad_length, pad_width, mask_expansion, paste_expansion, airgap,
                altium_script_path, allegro_script_path, pads_script_path, xpedition_script_path
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            part_number,
            data.get('footprint_name', 'N/A'),
            'DiscreteN',
            float(data.get('body_length', 0)) if data.get('body_length') else None,
            float(data.get('body_width', 0)) if data.get('body_width') else None,
            float(data.get('body_height', 0)) if data.get('body_height') else None,
            float(data.get('pad_length', 0)) if data.get('pad_length') else None,
            float(data.get('pad_width', 0)) if data.get('pad_width') else None,
            float(data.get('mask_expansion', 0)) if data.get('mask_expansion') else None,
            float(data.get('paste_expansion', 0)) if data.get('paste_expansion') else None,
            float(data.get('airgap', 0)) if data.get('airgap') else None,
            os.path.join(self.script_paths['altium'], f"{part_number}_altium.txt"),
            os.path.join(self.script_paths['allegro'], f"{part_number}_allegro.scr"),
            os.path.join(self.script_paths['pads'], f"{part_number}_pads.asc"),
            os.path.join(self.script_paths['xpedition'], f"{part_number}_xpedition.scr")
        ))
        conn.commit()
        conn.close()

    def save_discrete_f_to_db(self, data):
        """Save DiscreteF package data to DiscreteF table"""
        conn = sqlite3.connect(DATABASE_FILE)
        cursor = conn.cursor()
        
        part_number = data.get('part_number', 'N/A')
        
        cursor.execute('''
            INSERT INTO DiscreteF (
                part_number, footprint_name, component_type,
                body_length, body_width, body_height,
                pad_length, pad_width, fillet_radius, mask_expansion, paste_expansion, airgap,
                altium_script_path, allegro_script_path, pads_script_path, xpedition_script_path
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            part_number,
            data.get('footprint_name', 'N/A'),
            'DiscreteF',
            float(data.get('body_length', 0)) if data.get('body_length') else None,
            float(data.get('body_width', 0)) if data.get('body_width') else None,
            float(data.get('body_height', 0)) if data.get('body_height') else None,
            float(data.get('pad_length', 0)) if data.get('pad_length') else None,
            float(data.get('pad_width', 0)) if data.get('pad_width') else None,
            float(data.get('fillet_radius', 0)) if data.get('fillet_radius') else None,
            float(data.get('mask_expansion', 0)) if data.get('mask_expansion') else None,
            float(data.get('paste_expansion', 0)) if data.get('paste_expansion') else None,
            float(data.get('airgap', 0)) if data.get('airgap') else None,
            os.path.join(self.script_paths['altium'], f"{part_number}_altium.txt"),
            os.path.join(self.script_paths['allegro'], f"{part_number}_allegro.scr"),
            os.path.join(self.script_paths['pads'], f"{part_number}_pads.asc"),
            os.path.join(self.script_paths['xpedition'], f"{part_number}_xpedition.scr")
        ))
        conn.commit()
        conn.close()

    def save_sot23_n_to_db(self, data):
        """Save Sot23N package data to Sot23N table"""
        conn = sqlite3.connect(DATABASE_FILE)
        cursor = conn.cursor()
        
        part_number = data.get('part_number', 'N/A')
        
        cursor.execute('''
            INSERT INTO Sot23N (
                part_number, footprint_name, component_type,
                body_length, body_width, body_height, pitch,
                pad_length, pad_width, mask_expansion, paste_expansion, pin_count,
                altium_script_path, allegro_script_path, pads_script_path, xpedition_script_path
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            part_number,
            data.get('footprint_name', 'N/A'),
            'Sot23N',
            float(data.get('body_length', 0)) if data.get('body_length') else None,
            float(data.get('body_width', 0)) if data.get('body_width') else None,
            float(data.get('body_height', 0)) if data.get('body_height') else None,
            float(data.get('pitch', 0)) if data.get('pitch') else None,
            float(data.get('pad_length', 0)) if data.get('pad_length') else None,
            float(data.get('pad_width', 0)) if data.get('pad_width') else None,
            float(data.get('mask_expansion', 0)) if data.get('mask_expansion') else None,
            float(data.get('paste_expansion', 0)) if data.get('paste_expansion') else None,
            int(data.get('pin_count', 3)) if data.get('pin_count') else 3,
            os.path.join(self.script_paths['altium'], f"{part_number}_altium.txt"),
            os.path.join(self.script_paths['allegro'], f"{part_number}_allegro.scr"),
            os.path.join(self.script_paths['pads'], f"{part_number}_pads.asc"),
            os.path.join(self.script_paths['xpedition'], f"{part_number}_xpedition.scr")
        ))
        conn.commit()
        conn.close()

    def save_sot23_nmpe_to_db(self, data):
        """Save Sot23NMPE package data to Sot23NMPE table"""
        conn = sqlite3.connect(DATABASE_FILE)
        cursor = conn.cursor()
        
        part_number = data.get('part_number', 'N/A')
        
        cursor.execute('''
            INSERT INTO Sot23NMPE (
                part_number, footprint_name, component_type,
                body_length, body_width, body_height, pitch,
                pad_length, pad_width, mask_expansion, paste_expansion, mp_expansion, pin_count,
                altium_script_path, allegro_script_path, pads_script_path, xpedition_script_path
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            part_number,
            data.get('footprint_name', 'N/A'),
            'Sot23NMPE',
            float(data.get('body_length', 0)) if data.get('body_length') else None,
            float(data.get('body_width', 0)) if data.get('body_width') else None,
            float(data.get('body_height', 0)) if data.get('body_height') else None,
            float(data.get('pitch', 0)) if data.get('pitch') else None,
            float(data.get('pad_length', 0)) if data.get('pad_length') else None,
            float(data.get('pad_width', 0)) if data.get('pad_width') else None,
            float(data.get('mask_expansion', 0)) if data.get('mask_expansion') else None,
            float(data.get('paste_expansion', 0)) if data.get('paste_expansion') else None,
            float(data.get('mp_expansion', 0)) if data.get('mp_expansion') else None,
            int(data.get('pin_count', 3)) if data.get('pin_count') else 3,
            os.path.join(self.script_paths['altium'], f"{part_number}_altium.txt"),
            os.path.join(self.script_paths['allegro'], f"{part_number}_allegro.scr"),
            os.path.join(self.script_paths['pads'], f"{part_number}_pads.asc"),
            os.path.join(self.script_paths['xpedition'], f"{part_number}_xpedition.scr")
        ))
        conn.commit()
        conn.close()

    def save_sot23_f_to_db(self, data):
        """Save Sot23F package data to Sot23F table"""
        conn = sqlite3.connect(DATABASE_FILE)
        cursor = conn.cursor()
        
        part_number = data.get('part_number', 'N/A')
        
        cursor.execute('''
            INSERT INTO Sot23F (
                part_number, footprint_name, component_type,
                body_length, body_width, body_height, pitch,
                pad_length, pad_width, fillet_radius, mask_expansion, paste_expansion, pin_count,
                altium_script_path, allegro_script_path, pads_script_path, xpedition_script_path
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            part_number,
            data.get('footprint_name', 'N/A'),
            'Sot23F',
            float(data.get('body_length', 0)) if data.get('body_length') else None,
            float(data.get('body_width', 0)) if data.get('body_width') else None,
            float(data.get('body_height', 0)) if data.get('body_height') else None,
            float(data.get('pitch', 0)) if data.get('pitch') else None,
            float(data.get('pad_length', 0)) if data.get('pad_length') else None,
            float(data.get('pad_width', 0)) if data.get('pad_width') else None,
            float(data.get('fillet_radius', 0)) if data.get('fillet_radius') else None,
            float(data.get('mask_expansion', 0)) if data.get('mask_expansion') else None,
            float(data.get('paste_expansion', 0)) if data.get('paste_expansion') else None,
            int(data.get('pin_count', 3)) if data.get('pin_count') else 3,
            os.path.join(self.script_paths['altium'], f"{part_number}_altium.txt"),
            os.path.join(self.script_paths['allegro'], f"{part_number}_allegro.scr"),
            os.path.join(self.script_paths['pads'], f"{part_number}_pads.asc"),
            os.path.join(self.script_paths['xpedition'], f"{part_number}_xpedition.scr")
        ))
        conn.commit()
        conn.close()

    def save_sot23_fmpe_to_db(self, data):
        """Save Sot23FMPE package data to Sot23FMPE table"""
        conn = sqlite3.connect(DATABASE_FILE)
        cursor = conn.cursor()
        
        part_number = data.get('part_number', 'N/A')
        
        cursor.execute('''
            INSERT INTO Sot23FMPE (
                part_number, footprint_name, component_type,
                body_length, body_width, body_height, pitch,
                pad_length, pad_width, fillet_radius, mask_expansion, paste_expansion, mp_expansion, pin_count,
                altium_script_path, allegro_script_path, pads_script_path, xpedition_script_path
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            part_number,
            data.get('footprint_name', 'N/A'),
            'Sot23FMPE',
            float(data.get('body_length', 0)) if data.get('body_length') else None,
            float(data.get('body_width', 0)) if data.get('body_width') else None,
            float(data.get('body_height', 0)) if data.get('body_height') else None,
            float(data.get('pitch', 0)) if data.get('pitch') else None,
            float(data.get('pad_length', 0)) if data.get('pad_length') else None,
            float(data.get('pad_width', 0)) if data.get('pad_width') else None,
            float(data.get('fillet_radius', 0)) if data.get('fillet_radius') else None,
            float(data.get('mask_expansion', 0)) if data.get('mask_expansion') else None,
            float(data.get('paste_expansion', 0)) if data.get('paste_expansion') else None,
            float(data.get('mp_expansion', 0)) if data.get('mp_expansion') else None,
            int(data.get('pin_count', 3)) if data.get('pin_count') else 3,
            os.path.join(self.script_paths['altium'], f"{part_number}_altium.txt"),
            os.path.join(self.script_paths['allegro'], f"{part_number}_allegro.scr"),
            os.path.join(self.script_paths['pads'], f"{part_number}_pads.asc"),
            os.path.join(self.script_paths['xpedition'], f"{part_number}_xpedition.scr")
        ))
        conn.commit()
        conn.close()

    def save_to_package_n_to_db(self, data):
        """Save TOPackageN package data to TOPackageN table"""
        conn = sqlite3.connect(DATABASE_FILE)
        cursor = conn.cursor()
        
        part_number = data.get('part_number', 'N/A')
        
        cursor.execute('''
            INSERT INTO TOPackageN (
                part_number, footprint_name, component_type,
                body_length, body_width, body_height, tab_length, tab_width, pitch,
                pad_length, pad_width, mask_expansion, paste_expansion, pin_count,
                altium_script_path, allegro_script_path, pads_script_path, xpedition_script_path
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            part_number,
            data.get('footprint_name', 'N/A'),
            'TOPackageN',
            float(data.get('body_length', 0)) if data.get('body_length') else None,
            float(data.get('body_width', 0)) if data.get('body_width') else None,
            float(data.get('body_height', 0)) if data.get('body_height') else None,
            float(data.get('tab_length', 0)) if data.get('tab_length') else None,
            float(data.get('tab_width', 0)) if data.get('tab_width') else None,
            float(data.get('pitch', 0)) if data.get('pitch') else None,
            float(data.get('pad_length', 0)) if data.get('pad_length') else None,
            float(data.get('pad_width', 0)) if data.get('pad_width') else None,
            float(data.get('mask_expansion', 0)) if data.get('mask_expansion') else None,
            float(data.get('paste_expansion', 0)) if data.get('paste_expansion') else None,
            int(data.get('pin_count', 3)) if data.get('pin_count') else 3,
            os.path.join(self.script_paths['altium'], f"{part_number}_altium.txt"),
            os.path.join(self.script_paths['allegro'], f"{part_number}_allegro.scr"),
            os.path.join(self.script_paths['pads'], f"{part_number}_pads.asc"),
            os.path.join(self.script_paths['xpedition'], f"{part_number}_xpedition.scr")
        ))
        conn.commit()
        conn.close()

    def save_dual_side_n_to_db(self, data):
        """Save DualSideN package data to DualSideN table"""
        conn = sqlite3.connect(DATABASE_FILE)
        cursor = conn.cursor()
        
        part_number = data.get('part_number', 'N/A')
        
        cursor.execute('''
            INSERT INTO DualSideN (
                part_number, footprint_name, component_type,
                body_length, body_width, body_height, pitch, row_spacing,
                pad_length, pad_width, mask_expansion, paste_expansion, pin_count,
                altium_script_path, allegro_script_path, pads_script_path, xpedition_script_path
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            part_number,
            data.get('footprint_name', 'N/A'),
            'DualSideN',
            float(data.get('body_length', 0)) if data.get('body_length') else None,
            float(data.get('body_width', 0)) if data.get('body_width') else None,
            float(data.get('body_height', 0)) if data.get('body_height') else None,
            float(data.get('pitch', 0)) if data.get('pitch') else None,
            float(data.get('row_spacing', 0)) if data.get('row_spacing') else None,
            float(data.get('pad_length', 0)) if data.get('pad_length') else None,
            float(data.get('pad_width', 0)) if data.get('pad_width') else None,
            float(data.get('mask_expansion', 0)) if data.get('mask_expansion') else None,
            float(data.get('paste_expansion', 0)) if data.get('paste_expansion') else None,
            int(data.get('pin_count', 8)) if data.get('pin_count') else 8,
            os.path.join(self.script_paths['altium'], f"{part_number}_altium.txt"),
            os.path.join(self.script_paths['allegro'], f"{part_number}_allegro.scr"),
            os.path.join(self.script_paths['pads'], f"{part_number}_pads.asc"),
            os.path.join(self.script_paths['xpedition'], f"{part_number}_xpedition.scr")
        ))
        conn.commit()
        conn.close()
        
    def get_sidebar_options(self):
        return {
            "Home": "fa5s.home",  # 🏠 Home Dashboard
            "Discrete": "fa5s.sliders-h",  # 🔩 Discrete component like resistor
            "Sot-23": "fa5s.microchip",  # 🧩 Small Outline Transistor
            "Sot-143": "fa5s.satellite",  # 🛰️ Close representation (unique package)
            "TO Package": "fa5s.battery-half",  # 🔋 Power-related packages
            "Dual Side": "fa5s.clone",  # 🧿 Symmetric layout idea
            "Dual with thermal": "fa5s.fire",  # 🔥 For thermal pad
            "QF Package": "fa5s.shapes",  # 🔳 QFP packages
            "QF with thermal": "fa5s.thermometer-half",  # 🌡️ Thermal-aware QFP
            "QFN TWO ROW": "fa5s.border-style",
            "Connectors": "fa5s.plug",  # 🔌 Connectors
            "Crystals": "fa5s.icicles",  # ❄️ (symbolic for crystal oscillators)
            "BGA Package": "fa5s.th",  # ⬛ Ball Grid Array (use ‘th’ or ‘grip-lines’)
        }

    def create_home_page(self):
        page = QWidget()
        layout = QGridLayout(page)
        layout.setContentsMargins(25, 25, 25, 25)
        top_bar_layout = QHBoxLayout()
        title = QLabel("Dashboard"); title.setObjectName("HomePageTitle")
        top_bar_layout.addWidget(title); top_bar_layout.addStretch()
        settings_button = QPushButton()
        settings_button.setIcon(qtawesome.icon('fa5s.cog', color='#d0d0d0'))
        settings_button.setIconSize(QSize(24, 24)); settings_button.setFixedSize(40, 40)
        settings_button.setCursor(Qt.PointingHandCursor); settings_button.clicked.connect(self.go_to_settings)
        top_bar_layout.addWidget(settings_button)
        layout.addLayout(top_bar_layout, 0, 0, 1, 4)
        card1 = self.create_dashboard_card("Total Footprints", "1,204", "fa5s.database")
        card2 = self.create_dashboard_card("Scripts Generated", "89", "fa5s.file-code")
        card3 = self.create_dashboard_card("Last Generated", "IC-SOIC-8", "fa5s.clock")
        layout.addWidget(card1, 1, 0); layout.addWidget(card2, 1, 1); layout.addWidget(card3, 1, 2)
        layout.setRowStretch(2, 1)
        return page

    def create_dashboard_card(self, title_text, value_text, icon_name):
        card = QFrame(); card.setObjectName("DashboardCard"); card_layout = QVBoxLayout(card)
        title_label = QLabel(title_text); title_label.setStyleSheet("font-size: 11pt; color: #a0a0a0;")
        value_layout = QHBoxLayout()
        icon_label = QLabel(); icon_label.setPixmap(qtawesome.icon(icon_name, color='#5d9afc').pixmap(QSize(32, 32)))
        value_label = QLabel(value_text); value_label.setStyleSheet("font-size: 20pt; font-weight: bold;")
        value_layout.addWidget(icon_label); value_layout.addWidget(value_label); value_layout.addStretch()
        card_layout.addWidget(title_label); card_layout.addLayout(value_layout)
        return card

    def create_component_page(self, component_type):
        page = QWidget()
        layout = QGridLayout(page)
        layout.setContentsMargins(25, 25, 25, 25)

        title = QLabel(f"{component_type} Footprint")
        title.setObjectName("PageTitle")

        # Increase font size
        font = title.font()
        font.setPointSize(36)  # 🔧 Increase this value for larger font
        font.setBold(True)     # Optional
        title.setFont(font)
        layout.addWidget(title, 0, 0, 1, 2)
        
        # Use QSvgWidget for the main image display

        image_label = QSvgWidget()
        image_label.setMinimumSize(400, 400)
        image_label.setStyleSheet("background-color:#232730; border-radius:8px;")

        # Look up the default image for this component category, with a fallback.

        default_svg = self.DEFAULT_CATEGORY_IMAGE_MAP.get(component_type)

        # Attempt to load the specific SVG; if it fails, load the ultimate fallback.

        image_label.load(default_svg) 
            # Load a default SVG
        
        layout.addWidget(image_label, 1, 1, 2, 1)
        layout.setColumnStretch(1, 1)
        
        options_layout = QVBoxLayout()
        options_layout.setSpacing(15)

        options = {
            "Discrete": ["Discrete Narmal", "Discrete Fillet-Shape"],
            "Sot-23": ["Narmal", "Narmal with MP Expantion", "Fillet-Shape", "Fillet with MP Expantion"],
            "Sot-143": ["Narmal", "Narmal with MP Expantion", "Fillet-Shape", "Fillet with MP Expantion"],
            "TO Package": ["Narmal", "Narmal with MP Expantion", "Fillet-Shape", "Fillet with MP Expantion"],
            "Dual Side": ["Narmal", "Narmal with MP Expantion", "Fillet-Shape", "Fillet with MP Expantion"],
            "Dual with thermal": ["Narmal", "Narmal with MP Expantion", "Fillet-Shape", "Fillet with MP Expantion"],
            "QF Package": ["Narmal", "Narmal with MP Expantion", "Fillet-Shape", "Fillet with MP Expantion"],
            "QF with thermal": ["Narmal", "Narmal with MP Expantion", "Fillet-Shape", "Fillet with MP Expantion"],
            "QFN TWO ROW": ["Narmal", "Narmal with MP Expantion", "Fillet-Shape", "Fillet with MP Expantion"],
            "Connectors": ["Narmal", "Narmal with MP Expantion", "Fillet-Shape", "Fillet with MP Expantion"],
            "Crystals": ["Narmal", "Narmal with MP Expantion", "Fillet-Shape", "Fillet with MP Expantion"],
            "BGA Package": ["Narmal", "Narmal with MP Expantion", "Fillet-Shape", "Fillet with MP Expantion"],
        }

        component_options = options.get(component_type, ["Option A", "Option B"])

        # --- Image Mapping for Component Types and Options ---
        IMAGE_MAP = {
            ("Discrete", "Discrete Narmal"): "generator_resistor_chip.svg",
            ("Discrete", "Discrete Fillet-Shape"): "images/placeholder_C.svg",
            ("Sot-23", "Tantalum A"): "images/tantalum_a.svg",
            ("Sot-23", "Tantalum B"): "images/tantalum_b.svg",
            # Add more mappings as needed for other component types/options
        }

        # Use SVG paths for placeholder images
                
        for i, option_text in enumerate(component_options):
            option_label = ClickableLabel(option_text)
            option_label.setFixedWidth(300)
            image_path = IMAGE_MAP.get((component_type, option_text))
            # Capture image_path and option_text as default arguments
            option_label.singleClicked.connect(lambda checked=True, p=image_path:image_label.load(default_svg))
            option_label.doubleClicked.connect(lambda checked=True, c=component_type, o=option_text: self.go_to_generator(c, o))
            options_layout.addWidget(option_label)
        options_layout.addStretch()
        layout.addLayout(options_layout, 1, 0)
        return page

    def create_settings_page(self):
        page_widget = QWidget()
        page_layout = QVBoxLayout(page_widget)
        page_layout.setContentsMargins(0, 0, 0, 0)

        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setObjectName("SettingsScrollArea")
        page_layout.addWidget(scroll_area)

        container_widget = QWidget()
        scroll_area.setWidget(container_widget)
        container_layout = QVBoxLayout(container_widget)
        container_layout.setContentsMargins(25, 25, 25, 25)
        container_layout.setAlignment(Qt.AlignmentFlag.AlignTop)
        container_layout.setSpacing(20)

        title = QLabel("Settings")
        title.setObjectName("PageTitle")
        container_layout.addWidget(title)

        tab_widget = QTabWidget()
        tab_widget.addTab(self._create_Default_settings_tab(), "Default Settings")
        tab_widget.addTab(self._create_placeholder_tab("Account"), "Account")

        container_layout.addWidget(tab_widget)

        return page_widget

    def _create_Default_settings_tab(self):
        tab_widget = QWidget()
        main_layout = QVBoxLayout(tab_widget)
        main_layout.setAlignment(Qt.AlignmentFlag.AlignTop)
        main_layout.setSpacing(15)

        # Script Output Paths Group
        paths_group = QGroupBox("Script Output Paths")
        paths_layout = QGridLayout(paths_group)
        
        # Initialize default paths if they don't exist
        if not hasattr(self, 'script_paths'):
            self.script_paths = {
                'altium': self.current_script_path,
                'allegro': os.path.join(os.path.expanduser("~"), "allegro_scripts"),
                'pads': os.path.join(os.path.expanduser("~"), "pads_scripts"),
                'xpedition': os.path.join(os.path.expanduser("~"), "xpedition_scripts")
            }
            # Create directories if they don't exist
            for path in self.script_paths.values():
                os.makedirs(path, exist_ok=True)
        
        # Altium Path
        paths_layout.addWidget(QLabel("Altium Script Path:"), 0, 0)
        self.altium_path_edit = QLineEdit(self.script_paths['altium'])
        self.altium_path_edit.setReadOnly(True)
        altium_browse_btn = QPushButton("Browse")
        altium_browse_btn.clicked.connect(lambda: self.browse_for_script_path('altium'))
        paths_layout.addWidget(self.altium_path_edit, 0, 1)
        paths_layout.addWidget(altium_browse_btn, 0, 2)
        
        # Allegro Path
        paths_layout.addWidget(QLabel("Allegro Script Path:"), 1, 0)
        self.allegro_path_edit = QLineEdit(self.script_paths['allegro'])
        self.allegro_path_edit.setReadOnly(True)
        allegro_browse_btn = QPushButton("Browse")
        allegro_browse_btn.clicked.connect(lambda: self.browse_for_script_path('allegro'))
        paths_layout.addWidget(self.allegro_path_edit, 1, 1)
        paths_layout.addWidget(allegro_browse_btn, 1, 2)
        
        # PADS Path
        paths_layout.addWidget(QLabel("PADS Script Path:"), 2, 0)
        self.pads_path_edit = QLineEdit(self.script_paths['pads'])
        self.pads_path_edit.setReadOnly(True)
        pads_browse_btn = QPushButton("Browse")
        pads_browse_btn.clicked.connect(lambda: self.browse_for_script_path('pads'))
        paths_layout.addWidget(self.pads_path_edit, 2, 1)
        paths_layout.addWidget(pads_browse_btn, 2, 2)
        
        # Xpedition Path
        paths_layout.addWidget(QLabel("Xpedition Script Path:"), 3, 0)
        self.xpedition_path_edit = QLineEdit(self.script_paths['xpedition'])
        self.xpedition_path_edit.setReadOnly(True)
        xpedition_browse_btn = QPushButton("Browse")
        xpedition_browse_btn.clicked.connect(lambda: self.browse_for_script_path('xpedition'))
        paths_layout.addWidget(self.xpedition_path_edit, 3, 1)
        paths_layout.addWidget(xpedition_browse_btn, 3, 2)
        
        main_layout.addWidget(paths_group)
        main_layout.addWidget(self._create_clearance_settings_group())
        main_layout.addWidget(self._create_layer_settings_group())
        main_layout.addWidget(self._create_3d_settings_group())
        return tab_widget




    def _create_clearance_settings_group(self):
        group = QGroupBox("Default Clearance Settings")
        layout = QGridLayout(group)
        
        headers = ["Description", "Clearance (mm)", "Line Width"]
        for i, h in enumerate(headers):
            layout.addWidget(QLabel(h), 0, i, Qt.AlignmentFlag.AlignLeft if i==0 else Qt.AlignmentFlag.AlignCenter)

        rows_data = {
            "Courtyard Clearance": ["0.5", "0.1"],
            "Silkscreen Clearance": ["0.2", "0.12"],
        }
        for row_idx, (label, values) in enumerate(rows_data.items(), 1):
            layout.addWidget(QLabel(label + ":"), row_idx, 0)
            layout.addWidget(QLineEdit(values[0]), row_idx, 1)
            layout.addWidget(QLineEdit(values[1]), row_idx, 2)
        return group



    def _create_layer_settings_group(self):
        group = QGroupBox("Default Layer Settings")
        layout = QFormLayout(group)

        # Assembly Row
        assembly_layout = QHBoxLayout()
        assembly_layout.addWidget(QLabel("Line Width:"))
        assembly_layout.addWidget(QLineEdit("0.1"))
        layout.addRow("Assembly:", assembly_layout)

        return group

    def _create_3d_settings_group(self):
        group = QGroupBox("3D Body Settings")
        layout = QFormLayout(group)
        
        path_layout = QHBoxLayout()
        self.step_path_edit = QLineEdit()
        self.step_path_edit.setPlaceholderText("Select a default folder for STEP models...")
        self.step_path_edit.setReadOnly(True)
        browse_button = QPushButton("Browse")
        browse_button.clicked.connect(self.browse_for_step_path)
        
        path_layout.addWidget(self.step_path_edit)
        path_layout.addWidget(browse_button)
        layout.addRow("Default STEP Model Path:", path_layout)
        return group

    def _create_placeholder_tab(self, name):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
        label = QLabel(f"{name} settings will be configured here.")
        label.setStyleSheet("font-size: 14pt; color: #808080;")
        layout.addWidget(label)
        return widget
        
    def go_to_generator(self, component_type, option_name):
        page_widget = self.generator_pages.get((component_type, option_name))
        if page_widget:
            page_widget.set_output_path(self.current_script_path)
            self.stacked_widget.setCurrentWidget(page_widget)
        else:
            QMessageBox.information(self, "Not Implemented", f"The generator for '{option_name}' is not yet available.")

    def go_to_settings(self):
        self.stacked_widget.setCurrentIndex(self.settings_page_index)
        for button in self.button_group:
            button.setChecked(False)

    def browse_for_script_path(self, script_type):
        """Browse for script output path for specific tool type"""
        current_path = self.script_paths.get(script_type, os.path.expanduser("~"))
        directory = QFileDialog.getExistingDirectory(
            self, f"Select {script_type.title()} Script Output Folder", current_path
        )
        if directory:
            self.script_paths[script_type] = directory
            
            # Update the corresponding UI field
            if script_type == 'altium':
                self.altium_path_edit.setText(directory)
                self.current_script_path = directory  # Keep backward compatibility
            elif script_type == 'allegro':
                self.allegro_path_edit.setText(directory)
            elif script_type == 'pads':
                self.pads_path_edit.setText(directory)
            elif script_type == 'xpedition':
                self.xpedition_path_edit.setText(directory)
            
            # Update all generator pages
            for page in self.generator_pages.values():
                page.set_script_paths(self.script_paths)
            
            QMessageBox.information(
                self, "Path Set", 
                f"{script_type.title()} script output path has been set to:\n{directory}"
            )


    def browse_for_step_path(self):
        directory = QFileDialog.getExistingDirectory(self, "Select Default STEP Model Folder")
        if directory:
            self.step_path_edit.setText(directory)

           # --- Application Entry Point ---

if __name__ == "__main__":
    if not os.path.exists("images"):
        os.makedirs("images")
        print("Created 'images' directory. Please add placeholder SVG images for the best experience.")
    
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())
