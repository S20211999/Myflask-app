
import sys
import sqlite3
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.edge.options import Options  # Changed from chrome.options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import pandas as pd
import re
import time
from datetime import datetime
from PyQt6.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout,
                             QWidget, QToolBar, QPushButton, QTableWidget, QTableWidgetItem,
                             QComboBox, QLineEdit, QLabel, QTextEdit, QFileDialog,
                             QMessageBox, QTabWidget, QSpinBox, QDoubleSpinBox,
                             QProgressBar, QSplitter, QHeaderView)
from PyQt6.QtCore import Qt, QThread, pyqtSignal, QTimer
from PyQt6.QtGui import QAction, QIcon, QColor, QFont
import json
import urllib.parse

class FindChipScraper:
    def __init__(self):
        self.setup_driver()
        # Current exchange rates (you can update these or fetch from an API)
        self.exchange_rates = {
            'USD': 1.0,
            'INR': 0.012,  # 1 INR = 0.012 USD (approximate)
            'EUR': 1.08,   # 1 EUR = 1.08 USD (approximate)
            'GBP': 1.26,   # 1 GBP = 1.26 USD (approximate)
        }

    def setup_driver(self):
        """Setup Edge WebDriver with options"""
        edge_options = Options()  # Using Edge Options
        edge_options.add_argument('--headless')  # Run in background
        edge_options.add_argument('--no-sandbox')
        edge_options.add_argument('--disable-dev-shm-usage')
        edge_options.add_argument('--disable-gpu')
        edge_options.add_argument('--window-size=1920,1080')
        edge_options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36 Edg/91.0.864.59')
        edge_options.add_argument('--disable-web-security')
        edge_options.add_argument('--allow-running-insecure-content')
        
        try:
            # Using Edge WebDriver instead of Chrome
            self.driver = webdriver.Edge(options=edge_options)
            self.wait = WebDriverWait(self.driver, 10)
        except Exception as e:
            print(f"Error setting up Edge WebDriver: {str(e)}")
            self.driver = None

    def search_mpn(self, mpn):
        """Search for MPN on findchips.com and return pricing data"""
        if not self.driver:
            return None
            
        try:
            search_url = f"https://www.findchips.com/search/{urllib.parse.quote(mpn)}"
            self.driver.get(search_url)
            
            # Wait for results to load
            time.sleep(3)
            
            # Look for table rows with data attributes
            distributor_rows = self.driver.find_elements(By.CSS_SELECTOR, 'tr.row')
            
            distributors = []
            
            for row in distributor_rows:
                try:
                    distributor_data = self.parse_distributor_row(row)
                    if distributor_data:
                        distributors.append(distributor_data)
                except Exception as e:
                    continue
            
            return distributors
            
        except Exception as e:
            print(f"Error scraping {mpn}: {str(e)}")
            return None

    def parse_distributor_row(self, row):
        """Parse distributor data from a table row with data attributes"""
        try:
            # Extract data from attributes
            distributor_name = row.get_attribute('data-distributor_name') or 'Unknown'
            manufacturer = row.get_attribute('data-mfr') or 'Unknown'
            mpn = row.get_attribute('data-mfrpartnumber') or ''
            stock_raw = row.get_attribute('data-instock') or '0'
            price_data_raw = row.get_attribute('data-price') or '[]'
            
            # Parse stock information
            try:
                stock = int(stock_raw) if stock_raw.isdigit() else 0
            except (ValueError, AttributeError):
                stock = 0
            
            # Parse price tiers with currency conversion to USD
            price_tiers_usd = self.parse_price_data_to_usd(price_data_raw)
            
            if not price_tiers_usd:
                return None
                
            return {
                'distributor': distributor_name,
                'manufacturer': manufacturer,
                'mpn': mpn,
                'price_tiers': price_tiers_usd,
                'stock': stock,
                'currency': 'USD'  # All prices are now converted to USD
            }
            
        except Exception as e:
            return None

    def parse_price_data_to_usd(self, price_data_raw):
        """Parse price data from JSON string and convert all prices to USD"""
        price_tiers = []
        
        try:
            # The price data is in format: [[qty, "currency", "price"], ...]
            price_list = json.loads(price_data_raw)
            
            for tier in price_list:
                if len(tier) >= 3:
                    qty = int(tier[0])
                    currency = tier[1].upper()  # Ensure uppercase
                    price = float(tier[2])
                    
                    # Convert price to USD
                    usd_price = self.convert_to_usd(price, currency)
                    
                    price_tiers.append({
                        'quantity': qty,
                        'price': usd_price
                    })
                    
        except (json.JSONDecodeError, ValueError, IndexError) as e:
            return []
        
        # Sort by quantity (ascending)
        return sorted(price_tiers, key=lambda x: x['quantity'])

    def convert_to_usd(self, price, from_currency):
        """Convert price from any currency to USD"""
        from_currency = from_currency.upper()
        
        if from_currency == 'USD':
            return price
        elif from_currency in self.exchange_rates:
            return price * self.exchange_rates[from_currency]
        else:
            # If currency not recognized, assume it's already USD
            print(f"Warning: Unknown currency {from_currency}, assuming USD")
            return price

    def close(self):
        """Close the WebDriver"""
        if self.driver:
            self.driver.quit()

class ScrapingWorker(QThread):
    progress_updated = pyqtSignal(int)
    log_updated = pyqtSignal(str)
    data_scraped = pyqtSignal(str, list)  # mpn, distributors
    finished_scraping = pyqtSignal()

    def __init__(self, mpn_list):
        super().__init__()
        self.mpn_list = mpn_list
        self.scraper = None

    def run(self):
        self.scraper = FindChipScraper()
        
        if not self.scraper.driver:
            self.log_updated.emit("Failed to initialize Edge WebDriver")
            self.finished_scraping.emit()
            return
            
        total = len(self.mpn_list)
        for i, mpn in enumerate(self.mpn_list):
            try:
                self.log_updated.emit(f"Scraping MPN: {mpn}")
                distributors = self.scraper.search_mpn(mpn)
                if distributors:
                    self.data_scraped.emit(mpn, distributors)
                    self.log_updated.emit(f"Found {len(distributors)} distributors for {mpn}")
                else:
                    self.log_updated.emit(f"No data found for {mpn}")
                    
                self.progress_updated.emit(int((i + 1) / total * 100))
                time.sleep(2)  # Rate limiting for Selenium
                
            except Exception as e:
                self.log_updated.emit(f"Error scraping {mpn}: {str(e)}")
        
        if self.scraper:
            self.scraper.close()
        self.finished_scraping.emit()

# The rest of the code (DatabaseManager, BOMAnalyzer classes) remains exactly the same as the previous version

class DatabaseManager:
    def __init__(self, db_path="bom_data.db"):
        self.db_path = db_path
        self.init_database()
        self.migrate_database()

    def init_database(self):
        """Initialize the database tables"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS component_data (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            mpn TEXT NOT NULL,
            distributor TEXT,
            manufacturer TEXT,
            price_tiers TEXT,  -- Store as JSON string
            stock INTEGER DEFAULT 0,
            currency TEXT DEFAULT 'USD',
            scraped_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(mpn, distributor)
        )
        ''')
        conn.commit()
        conn.close()

    # ... (rest of DatabaseManager methods remain the same)

class BOMAnalyzer(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("BOM Web Scraper & Analyzer (Edge - USD Converter)")
        self.setGeometry(100, 100, 1400, 800)
        
        # Initialize components
        self.db_manager = DatabaseManager()
        self.bom_data = None
        self.scraped_data = {}
        
        # Exchange rates (default values) - All prices are now in USD
        self.exchange_rates = {"USD": 1.0, "INR": 83.2}
        
        self.setup_ui()
        self.setup_connections()

    # ... (all other methods remain exactly the same as the previous version)

def main():
    app = QApplication(sys.argv)
    window = BOMAnalyzer()
    window.show()
    sys.exit(app.exec())

if __name__ == "__main__":
    main()
