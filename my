
class DiscreteN(BaseGeneratorPage):
    """Generator page for discrete normal packages"""
    
    def __init__(self, parent=None):
        super().__init__("DiscreteN", parent)

        self.input_fields = {
            "Part Number": QLineEdit(),
            "Footprint Name": QLineEdit(),
            "refdesignator": QLineEdit(),
            "Body Length (mm)": QLineEdit(),
            "Body Width (mm)": QLineEdit(),
            "Body Height (mm)": QLineEdit(),
            "Pad Length (mm)": QLineEdit(),
            "Pad Width (mm)": QLineEdit(),
            "Mask Expansion (mm)": QLineEdit(),
            "Paste Expansion (mm)": QLineEdit(),
            "Airgap (mm)": QLineEdit(),
        }
        for label, field in self.input_fields.items():
            self.form_layout.addRow(label, field)
        
        try:
            self.image_label.load("generator_resistor_chip.svg")
        except:
            pass

    def generate_script_for_tool(self, data, tool_type):
        """Generate script for specific tool type"""
        if tool_type == 'altium':
            return self._generate_altium_script(data)
        elif tool_type == 'allegro':
            return self._generate_allegro_script(data)
        elif tool_type == 'pads':
            return self._generate_pads_script(data)
        elif tool_type == 'xpedition':
            return self._generate_xpedition_script(data)
        else:
            raise ValueError(f"Unsupported tool type: {tool_type}")

    def _generate_altium_script(self, data):
        """Generate Altium Designer script"""
        try:
            part_number = data.get('part_number', '').strip()
            footprint_name = data.get('footprint_name', '').strip()
            refdes = data.get('refdesignator', '').strip()

            body_length_max = to_decimal(data.get('body_length'))
            body_width_max = to_decimal(data.get('body_width'))
            body_height_max = to_decimal(data.get('body_height'))
            pad_length = to_decimal(data.get('pad_length'))
            pad_width = to_decimal(data.get('pad_width'))
            mask_expansion = to_decimal(data.get('mask_expansion'))
            paste_expansion = to_decimal(data.get('paste_expansion'))
            air_gap = to_decimal(data.get('airgap'))

        except Exception as e:
            raise ValueError(f"Invalid input: {e}")




        script = f"""# Created by Footprint Generator - Altium Designer
    Footprint (Name "{footprint_name}") (Height {body_height_max * 39.37})
    Line (Width 1.9685) (Start -{(body_length_max/2) * 39.37}, -{(body_width_max/2) * 39.37}) (End {(body_length_max/2) * 39.37}, -{(body_width_max/2) * 39.37}) (Layer Mechanical13)
    Line (Width 1.9685) (Start {(body_length_max/2) * 39.37}, -{(body_width_max/2) * 39.37}) (End {(body_length_max/2) * 39.37}, {(body_width_max/2) * 39.37}) (Layer Mechanical13)
    Line (Width 1.9685) (Start {(body_length_max/2) * 39.37}, {(body_width_max/2) * 39.37}) (End -{(body_length_max/2) * 39.37}, {(body_width_max/2) * 39.37}) (Layer Mechanical13)
    Line (Width 1.9685) (Start -{(body_length_max/2) * 39.37}, {(body_width_max/2) * 39.37}) (End -{(body_length_max/2) * 39.37}9, -{(body_width_max/2) * 39.37}) (Layer Mechanical13)
    Line (Width 1.9685) (Start -{max(((body_length_max/2) + 0.3) * 39.37,(((2*pad_length+air_gap)/2+0.275)* 39.37))}, -{max(((body_width_max/2) + 0.3) * 39.37,((pad_width/2)+0.275) * 39.37)}) (End {max(((body_length_max/2) + 0.3) * 39.37,(((2*pad_length+air_gap)/2+0.275)* 39.37))}, -{max(((body_width_max/2) + 0.3) * 39.37,((pad_width/2)+0.275) * 39.37)}) (Layer Mechanical15)
    Line (Width 1.9685) (Start {max(((body_length_max/2) + 0.3) * 39.37,(((2*pad_length+air_gap)/2+0.275)* 39.37))}, -{max(((body_width_max/2) + 0.3) * 39.37,((pad_width/2)+0.275) * 39.37)}) (End {max(((body_length_max/2) + 0.3) * 39.37,(((2*pad_length+air_gap)/2+0.275)* 39.37))}, {max(((body_width_max/2) + 0.3) * 39.37,((pad_width/2)+0.275) * 39.37)}) (Layer Mechanical15)
    Line (Width 1.9685) (Start {max(((body_length_max/2) + 0.3) * 39.37,(((2*pad_length+air_gap)/2+0.275)* 39.37))}, {max(((body_width_max/2) + 0.3) * 39.37,((pad_width/2)+0.275) * 39.37)}) (End -{max(((body_length_max/2) + 0.3) * 39.37,(((2*pad_length+air_gap)/2+0.275)* 39.37))}, {max(((body_width_max/2) + 0.3) * 39.37,((pad_width/2)+0.275) * 39.37)}) (Layer Mechanical15)
    Line (Width 1.9685) (Start -{max(((body_length_max/2) + 0.3) * 39.37,(((2*pad_length+air_gap)/2+0.275)* 39.37))}, {max(((body_width_max/2) + 0.3) * 39.37,((pad_width/2)+0.275) * 39.37)}) (End -{max(((body_length_max/2) + 0.3) * 39.37,(((2*pad_length+air_gap)/2+0.275)* 39.37))}, -{max(((body_width_max/2) + 0.3) * 39.37,((pad_width/2)+0.275) * 39.37)}) (Layer Mechanical15)
    Line (Width 5.9055) (Start -{(body_length_max/2) * 39.37}, -{max(((body_width_max/2) * 39.37),((pad_width/2)+0.225)*39.37)}) (End {(body_length_max/2) * 39.37}, -{max(((body_width_max/2) * 39.37),((pad_width/2)+0.225)*39.37)}) (Layer TopOverlay)
    Line (Width 5.9055) (Start {(body_length_max/2) * 39.37}, {max(((body_width_max/2) * 39.37),((pad_width/2)+0.225)*39.37)}) (End -{(body_length_max/2) * 39.37}, {max(((body_width_max/2) * 39.37),((pad_width/2)+0.225)*39.37)}) (Layer TopOverlay)
    Polygon (PointCount 4) (Type KeepOut) (Layer TopLayer) 
    Point (-{(air_gap-0.25)/2 * 39.37}, {(body_width_max/2 -0.025) *39.37})
    Point ({(air_gap-0.25)/2 * 39.37}, {(body_width_max/2 -0.025) *39.37})
    Point ({(air_gap-0.25)/2 * 39.37}, -{(body_width_max/2 -0.025) *39.37})
    Point (-{(air_gap-0.25)/2 * 39.37}, -{(body_width_max/2 -0.025) *39.37})
    EndPolygon
    Text (Location -126, -11.063) (Layer Mechanical13) (Height 25) (Width 1.968) (Mirrored False) (Rotation 0) (Value ".Designator")
    Pad (Name "1") (Location -{((pad_length+air_gap)/2) * 39.37}, 0) (Surface True) (Plated True) (Plated True) (Rotation 0) (ExpandMask {mask_expansion * 39.37}) (ExpandPaste -{paste_expansion * 39.37})
    PadShape (Size {pad_length * 39.37}, {pad_width * 39.37}) (Shape Rectangular) (Layer Top)
    EndPad
    Pad (Name "2") (Location {((pad_length+air_gap)/2) * 39.37}, 0) (Surface True) (Plated True) (Plated True) (Rotation 0) (ExpandMask {mask_expansion * 39.37}) (ExpandPaste -{paste_expansion * 39.37})
    PadShape (Size {pad_length * 39.37}, {pad_width * 39.37}) (Shape Rectangular) (Layer Top)
    EndPad
    EndFootprint
    EndFootprints

"""
        return script, f"{part_number}.txt"

    def _generate_allegro_script(self, data):
        """Generate Cadence Allegro script"""

        try:
            part_number = data.get('part_number', '').strip()
            footprint_name = data.get('footprint_name', '').strip()
            refdes = data.get('refdesignator', '').strip()

            body_length_max = to_decimal(data.get('body_length'))
            body_width_max = to_decimal(data.get('body_width'))
            body_height_max = to_decimal(data.get('body_height'))
            pad_length = to_decimal(data.get('pad_length'))
            pad_width = to_decimal(data.get('pad_width'))
            mask_expansion = to_decimal(data.get('mask_expansion'))
            paste_expansion = to_decimal(data.get('paste_expansion'))
            air_gap = to_decimal(data.get('airgap'))

        except Exception as e:
            raise ValueError(f"Invalid input: {e}")

        output_path = self.script_paths.get("allegro")
        # Validation and calculations
        two = Decimal("2")

        xpitch = pad_length + air_gap
        hpitchl = xpitch / two
        hbl = body_length_max / two
        hbw = body_width_max / two
        hpw = pad_width / two
        mno = hpw + 0.225
        dbpxxx = air_gap - 0.25
        pwxyz = body_width_max - 0.05
        abc = pad_width+0.5
        bca = body_width_max+0.55
        xyz = pad_width+1.02
        zyx = body_width_max+1.07
        pwxxx = max(abc,bca)
        pwzyx = max(xyz,zyx)
        hpwid = max(mno,hbw)
        psm = ((2*pad_length)+air_gap)+0.5
        msm = (body_length_max+0.55)
        msp = max(msm,psm)
        prq = ((2*pad_length)+air_gap)+1.02
        qrp = (body_length_max+1.07)
        pqr = max(prq,qrp)    

        qqq = round(pad_length*100)
        ppp = round(pad_width*100)
        rrr = round(2*mask_expansion*100)+qqq
        sss = round(2*paste_expansion*100)+qqq
        ttt = round(2*mask_expansion*100)+ppp
        uuu = round(2*paste_expansion*100)+ppp

        if pad_length == pad_width:
            outline = "SQUARE"
            if paste_expansion == 0 and mask_expansion==0:
                padn = f"S{qqq}"
            elif paste_expansion==0:
                padn = f"S{qqq}M{rrr}"
            elif mask_expansion==0:
                padn = f"S{qqq}p{sss}"
            else:    
                padn = f"S{qqq}M{rrr}P{sss}"
        else:
            outline = "RECTANGLE"
            if paste_expansion == 0 and mask_expansion==0:
                padn = f"S{qqq}_{ppp}"
            elif paste_expansion == 0:
                padn = f"R{qqq}_{ppp}M{rrr}_{ttt}"
            elif mask_expansion == 0:
                padn = f"S{qqq}_{ppp}P{sss}_{uuu}"
            else:
                padn = f"R{qqq}_{ppp}M{rrr}_{ttt}P{sss}_{uuu}"
        
