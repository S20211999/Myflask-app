def export_to_excel(self):
    """Export calculation results to Excel WITHOUT best match reference details"""
    try:
        # Check if we have results to export
        if self.results_table.rowCount() == 0:
            QMessageBox.information(self, "Export", "No calculation results to export. Please calculate first.")
            return

        file_path, _ = QFileDialog.getSaveFileName(
            self, "Export to Excel", 
            f"PCB_Project_Cost_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            "Excel Files (*.xlsx)"
        )
        
        if file_path:
            # Extract only essential data (excluding best match reference)
            export_data = []
            
            # Get current values from form
            customer_name = self.customer_input.text().strip()
            job_number = self.job_input.text().strip()
            pcb_part_number = self.pcb_part_input.text().strip()
            quantity = self.quantity_input.text().strip()
            unit = self.unit_combo.currentText()
            length = self.length_input.text().strip()
            width = self.width_input.text().strip()
            soldermask = self.soldermask_input.text().strip() or "Not specified"
            silkscreen = self.silkscreen_input.text().strip() or "Not specified"
            
            # Calculate basic values
            try:
                qty = int(quantity)
                l = float(length)
                w = float(width)
                area = l * w
                total_area = area * qty
            except:
                area = "Invalid"
                total_area = "Invalid"
            
            # Get applied filters
            applied_filters = []
            for field, combo in self.filter_combos.items():
                value = combo.currentText().strip()
                if value and value != "Any":
                    applied_filters.append(f"{field}: {value}")
            
            # Get pricing from results table if available
            per_unit_price = "Not calculated"
            total_project_price = "Not calculated"
            
            for row in range(self.results_table.rowCount()):
                param_item = self.results_table.item(row, 0)
                value_item = self.results_table.item(row, 1)
                if param_item and value_item:
                    param = param_item.text()
                    value = value_item.text()
                    if "Price per PCB" in param:
                        per_unit_price = value
                    elif "Total Project Price" in param:
                        total_project_price = value
            
            # Create export data structure - NO BEST MATCH REFERENCE
            export_data = [
                ["PCB Project Cost Calculation", ""],
                ["", ""],
                ["Project Information", ""],
                ["Customer Name", customer_name],
                ["Job Number", job_number],
                ["PCB Part Number", pcb_part_number],
                ["Project Quantity", f"{quantity} pieces"],
                ["Calculation Date", datetime.now().strftime('%Y-%m-%d %H:%M:%S')],
                ["", ""],
                ["PCB Specifications", ""],
                ["Unit", unit],
                ["Length", f"{length} {unit}"],
                ["Width", f"{width} {unit}"],
                ["PCB Area", f"{area} {unit}²" if area != "Invalid" else "Invalid"],
                ["Total Project Area", f"{total_area} {unit}²" if total_area != "Invalid" else "Invalid"],
                ["", ""],
                ["Reference Specifications", ""],
                ["Soldermask", soldermask],
                ["Silkscreen", silkscreen],
                ["", ""]
            ]
            
            # Add applied filters if any
            if applied_filters:
                export_data.extend([
                    ["Applied Filters", ""],
                    ["Filter Count", f"{len(applied_filters)} filters"]
                ])
                for i, filter_info in enumerate(applied_filters, 1):
                    export_data.append([f"Filter {i}", filter_info])
                export_data.append(["", ""])
            
            # Add final pricing
            export_data.extend([
                ["FINAL PRICING", ""],
                ["Price per PCB", per_unit_price],
                ["Project Quantity", f"{quantity} pieces"],
                ["Total Project Cost", total_project_price]
            ])
            
            # Create DataFrame and export
            df = pd.DataFrame(export_data, columns=['Parameter', 'Value'])
            df.to_excel(file_path, index=False, sheet_name='PCB Project Cost')
            
            QMessageBox.information(self, "Export Success", 
                                  f"Project cost data exported successfully!\n\nFile saved as:\n{file_path}")
                                    
    except Exception as e:
        QMessageBox.critical(self, "Export Error", f"Failed to export data: {str(e)}")
