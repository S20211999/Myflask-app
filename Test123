import sys
import re
import pandas as pd
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QFileDialog, QTableWidgetItem, QMessageBox
)


class BomCostChecker(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("BOM Cost Checker")
        self.resize(1200, 700)
        self.setStyleSheet(self._stylesheet())

        # ------------------  widgets  ------------------
        central = QtWidgets.QWidget(self)
        vbox = QtWidgets.QVBoxLayout(central)
        vbox.setContentsMargins(10, 15, 10, 0)  # reduced bottom margin
        vbox.setSpacing(8)

        fileBar = QtWidgets.QGroupBox("Load BOM")
        fileLayout = QtWidgets.QHBoxLayout(fileBar)
        fileLayout.setContentsMargins(20, 20, 10, 10)  # ‚¨ÖÔ∏è Reduce top/bottom padding
        fileLayout.setSpacing(8) 

        self.ownBtn = QtWidgets.QPushButton("üì• Load Customer BOM")
        self.altiumBtn = QtWidgets.QPushButton("üì• Load Altium BOM")
        self.runBtn = QtWidgets.QPushButton("‚öôÔ∏è Process BOM")
        self.exportBtn = QtWidgets.QPushButton("üìë Export to Excel")
        self.runBtn.setEnabled(False)

        fileLayout.addWidget(self.ownBtn)
        fileLayout.addWidget(self.altiumBtn)
        fileLayout.addStretch()
        fileLayout.addWidget(self.runBtn)
        fileLayout.addWidget(self.exportBtn)

        self.table = QtWidgets.QTableWidget()
        self.table.setAlternatingRowColors(True)
        self.table.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.table.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.table.horizontalHeader().setStretchLastSection(True)
        self.table.setContentsMargins(0, 0, 0, 0) 



        self.totalLbl1 = QtWidgets.QLabel("")
        self.totalLbl2 = QtWidgets.QLabel("")
        self.totalLbl1.setStyleSheet("font-weight: bold;")
        self.totalLbl2.setStyleSheet("font-weight: bold;")


        vbox.addWidget(fileBar)
        vbox.addWidget(self.table, stretch=1)
        vbox.addWidget(self.totalLbl1)
        vbox.addWidget(self.totalLbl2)


        self.setCentralWidget(central)
        # ------------------  state vars  ------------------
        self.own_df = None
        self.altium_df = None
        self.merged_df = None

        # ------------------  signals  ------------------
        self.ownBtn.clicked.connect(self.load_own)
        self.altiumBtn.clicked.connect(self.load_altium)
        self.runBtn.clicked.connect(self.process)
        self.exportBtn.clicked.connect(self.export_results)

    def _stylesheet(self):
        return """
        QWidget {
            font-family: "Segoe UI", sans-serif;
            font-size: 12pt;
        }
        QPushButton {
            background-color: #0078D7;
            color: white;
            padding: 8px 15px;
            border-radius: 5px;
        }
        QPushButton:disabled {
            background-color: #888888;
        }
        QPushButton:hover {
            background-color: #005a9e;
        }
        QTableWidget {
            background-color: #fdfdfd;
            alternate-background-color: #f3faff;
            border: 1px solid #ccc;
        }
        QGroupBox {
            font-weight: bold;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-top: 10px;
        }
        QGroupBox::title {
            subcontrol-origin: margin;
            left: 10px;
            padding: 0 3px 0 3px;
        }
        """

    def load_own(self):
        path, _ = QFileDialog.getOpenFileName(
            self, "Select Own BOM Excel", "", "Excel files (*.xlsx *.xls)"
        )
        if path:
            try:
                self.own_df = pd.read_excel(path)
                self.statusBar().showMessage("Own BOM loaded successfully.")
                QMessageBox.information(self, "Own BOM", "Loaded OK.")
                self.check_ready()
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Could not read file:\n{e}")

    def load_altium(self):
        path, _ = QFileDialog.getOpenFileName(
            self, "Select Altium BOM Excel", "", "Excel files (*.xlsx *.xls)"
        )
        if path:
            try:
                self.altium_df = pd.read_excel(path)
                self.statusBar().showMessage("Altium BOM loaded successfully.")
                QMessageBox.information(self, "Altium BOM", "Loaded OK.")
                self.check_ready()
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Could not read file:\n{e}")

    def check_ready(self):
        ready = self.own_df is not None and self.altium_df is not None
        self.runBtn.setEnabled(ready)
        if ready:
            self.statusBar().showMessage("Ready to process...")

    def process(self):
        own = self.own_df.copy()
        alt = self.altium_df.copy()

        colmap_own = {'RefDes': 'RefDes', 'Part Number': 'PartNumber', 'Quantity': 'Qty'}
        colmap_alt = {
            'Part Number': 'PartNumber',
            'Supplier1': 'Sup1',
            'Supplier1 Unit Price': 'Sup1Price',
            'Supplier2': 'Sup2',
            'Supplier2 Unit Price': 'Sup2Price'
        }

        own.rename(columns=colmap_own, inplace=True)
        alt.rename(columns=colmap_alt, inplace=True)
        own = own[list(colmap_own.values())]
        alt = alt[list(colmap_alt.values())]

        def count_refdes(s):
            if pd.isna(s): return 0
            return len(re.split(r'[\s,]+', str(s).strip()))
        own['RefDesCount'] = own['RefDes'].apply(count_refdes)
        own['Mismatch'] = own['RefDesCount'] != own['Qty']

        merged = pd.merge(own, alt, how='left', on='PartNumber', validate='1:1')
        merged['TotSup1'] = merged['Qty'] * merged['Sup1Price'].fillna(0)
        merged['TotSup2'] = merged['Qty'] * merged['Sup2Price'].fillna(0)

        display_cols = [
            'RefDes', 'PartNumber', 'Qty',
            'Sup1', 'Sup1Price', 'TotSup1',
            'Sup2', 'Sup2Price', 'TotSup2'
        ]
        self.table.setColumnCount(len(display_cols))
        self.table.setRowCount(len(merged))
        self.table.setHorizontalHeaderLabels(display_cols)

        for r, row in merged.iterrows():
            for c, col in enumerate(display_cols):
                item = QTableWidgetItem(str(row[col]) if not pd.isna(row[col]) else "")
                if col in {'Qty', 'Sup1Price', 'Sup2Price', 'TotSup1', 'TotSup2'}:
                    item.setTextAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
                self.table.setItem(r, c, item)
            if row['Mismatch']:
                for c in range(len(display_cols)):
                    self.table.item(r, c).setForeground(QtGui.QBrush(QtGui.QColor("red")))

        self.table.resizeColumnsToContents()
        tot1 = merged['TotSup1'].sum()
        tot2 = merged['TotSup2'].sum()
        self.totalLbl1.setText(f"üí∞ Total project price Supplier 1:  ‚Çπ {tot1:,.2f}")
        self.totalLbl2.setText(f"üí∞ Total project price Supplier 2:  ‚Çπ {tot2:,.2f}")

        self.statusBar().showMessage("Processing complete.")
        self.exportBtn.setEnabled(True)
        self.merged_df = merged  # Save for export

    def export_results(self):
        if self.merged_df is None:
            return
        path, _ = QFileDialog.getSaveFileName(
            self, "Save BOM Comparison", "", "Excel Files (*.xlsx);;CSV Files (*.csv)"
        )
        if path:
            try:
                if path.endswith('.csv'):
                    self.merged_df.to_csv(path, index=False)
                else:
                    self.merged_df.to_excel(path, index=False)
                self.statusBar().showMessage("Export successful.")
                QMessageBox.information(self, "Export", "File saved successfully!")
            except Exception as e:
                QMessageBox.critical(self, "Export Error", f"Could not save file:\n{e}")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    win = BomCostChecker()
    win.show()
    sys.exit(app.exec_())
