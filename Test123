def populate_project_results(self, customer_name, job_number, pcb_part_number, unit, quantity,
                           length, width, input_area, ref_length, ref_width,
                           ref_price_per_unit, price_per_sq_unit, per_unit_price, total_project_price,
                           reference_specs, applied_filters, final_count):
    """Display results with project totals"""
    
    rows = [
        ("PCB Fabrication Cost Tool", "", "header"),
        ("", "", "spacer"),
        ("Project Information", "", "section"),
        ("Customer Name", customer_name, "data"),
        ("Job Number", job_number, "data"),
        ("PCB Part Number", pcb_part_number, "data"),
        ("Project Quantity", f"{quantity:,} pieces", "data"),
        ("Calculation Date", datetime.now().strftime('%Y-%m-%d %H:%M:%S'), "data"),
        ("", "", "spacer"),
        ("PCB Specifications", "", "section"),
        ("Unit", unit, "data"),
        ("Length", f"{length} {unit}", "data"),
        ("Width", f"{width} {unit}", "data"),
        ("PCB Area", f"{input_area:.2f} {unit}²", "data"),
        ("Total PCB Area", f"{input_area * quantity:.2f} {unit}² ({quantity:,} × {input_area:.2f})", "data"),
    ]
    
    # Show sequential filters applied
    if applied_filters:
        rows.extend([
            ("", "", "spacer"),
            ("Sequential Filters Applied", "", "section"),
            ("Records Found", f"{final_count} matches", "data"),
            ("", "", "spacer"),
            ("Filter Sequence:", "", "section")
        ])
        
        for i, filter_info in enumerate(applied_filters, 1):
            rows.append((f"Step {i}", filter_info, "data"))
    
    # Show best match details
    rows.extend([
        ("", "", "spacer"),
        ("Best Match Reference", "", "section")
    ])
    
    for spec_name, spec_value in reference_specs.items():
        rows.append((spec_name, str(spec_value), "data"))
        
    rows.extend([
        ("Reference Size", f"{ref_length} × {ref_width} {unit}", "data"),
        ("Reference Price/Unit", f"₹{ref_price_per_unit:.2f}", "data"),
        ("", "", "spacer"),
        ("PRICING BREAKDOWN", "", "section"),
        ("Price per Square Unit", f"₹{price_per_sq_unit:.4f}", "calculation"),
        ("Price per PCB", f"₹{per_unit_price:.2f}", "calculation"),
        ("Project Quantity", f"{quantity:,} pieces", "calculation"),
        ("", "", "spacer"),
        ("TOTAL PROJECT COST", "", "section"),
        ("Total Project Price", f"₹{total_project_price:,.2f}", "total"),
        ("Cost Breakdown", f"₹{per_unit_price:.2f} × {quantity:,} = ₹{total_project_price:,.2f}", "total")
    ])

    # Populate table
    self.results_table.setRowCount(len(rows))
    
    for row_idx, (param, value, row_type) in enumerate(rows):
        param_item = QTableWidgetItem(param)
        value_item = QTableWidgetItem(value)
        
        if row_type == "header":
            param_item.setBackground(QColor(68, 114, 196))
            param_item.setForeground(QColor(255, 255, 255))
            value_item.setBackground(QColor(68, 114, 196))
            value_item.setForeground(QColor(255, 255, 255))
            font = QFont()
            font.setBold(True)
            font.setPointSize(14)
            param_item.setFont(font)
            
        elif row_type == "section":
            param_item.setBackground(QColor(213, 228, 247))
            value_item.setBackground(QColor(213, 228, 247))
            font = QFont()
            font.setBold(True)
            param_item.setFont(font)
            value_item.setFont(font)
            
        elif row_type == "calculation":
            param_item.setBackground(QColor(226, 239, 218))
            value_item.setBackground(QColor(226, 239, 218))
            font = QFont()
            font.setBold(True)
            param_item.setFont(font)
            value_item.setFont(font)
            
        elif row_type == "total":
            # Special formatting for total project price
            param_item.setBackground(QColor(255, 235, 156))  # Gold background
            value_item.setBackground(QColor(255, 235, 156))
            font = QFont()
            font.setBold(True)
            font.setPointSize(12)
            param_item.setFont(font)
            value_item.setFont(font)
            
        elif row_type == "data":
            param_item.setBackground(QColor(242, 242, 242))
            value_item.setBackground(QColor(255, 255, 255))

        self.results_table.setItem(row_idx, 0, param_item)
        self.results_table.setItem(row_idx, 1, value_item)

    self.results_table.resizeColumnsToContents()
    self.results_table.resizeRowsToContents()
